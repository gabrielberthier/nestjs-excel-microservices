{
  "manifest": {
    "name": "strtok3",
    "version": "9.1.1",
    "description": "A promise based streaming tokenizer",
    "author": {
      "name": "Borewit",
      "url": "https://github.com/Borewit"
    },
    "funding": {
      "type": "github",
      "url": "https://github.com/sponsors/Borewit"
    },
    "scripts": {
      "clean": "del-cli 'lib/**/*.js' 'lib/**/*.js.map' 'lib/**/*.d.ts' 'test/**/*.js' 'test/**/*.js.map'",
      "compile-src": "tsc -p lib",
      "compile-test": "tsc -p test",
      "compile": "yarn run compile-src && yarn run compile-test",
      "build": "yarn run clean && yarn run compile",
      "eslint": "eslint lib test",
      "lint-md": "remark -u preset-lint-recommended .",
      "lint-ts": "biome check",
      "lint": "yarn run lint-md && yarn run lint-ts",
      "fix": "yarn run biome lint --write",
      "test": "mocha",
      "test-coverage": "c8 yarn run test",
      "send-codacy": "c8 report --reporter=text-lcov | codacy-coverage",
      "start": "yarn run compile && yarn run lint && yarn run cover-test"
    },
    "engines": {
      "node": ">=16"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Borewit/strtok3.git"
    },
    "license": "MIT",
    "type": "module",
    "exports": {
      ".": {
        "node": "./lib/index.js",
        "default": "./lib/core.js"
      },
      "./core": "./lib/core.js"
    },
    "types": "lib/index.d.ts",
    "files": [
      "lib/**/*.js",
      "lib/**/*.d.ts"
    ],
    "bugs": {
      "url": "https://github.com/Borewit/strtok3/issues"
    },
    "devDependencies": {
      "@biomejs/biome": "^1.9.4",
      "@types/chai": "^5.0.1",
      "@types/chai-as-promised": "^8.0.1",
      "@types/debug": "^4.1.12",
      "@types/mocha": "^10.0.9",
      "@types/node": "^22.9.0",
      "c8": "^10.1.2",
      "chai": "^5.1.2",
      "chai-as-promised": "^8.0.1",
      "del-cli": "^6.0.0",
      "mocha": "^10.8.2",
      "remark-cli": "^12.0.1",
      "remark-preset-lint-recommended": "^7.0.0",
      "token-types": "^6.0.0",
      "ts-node": "^10.9.2",
      "typescript": "^5.7.2",
      "uint8array-extras": "^1.4.0"
    },
    "dependencies": {
      "@tokenizer/token": "^0.3.0",
      "peek-readable": "^5.3.1"
    },
    "keywords": [
      "tokenizer",
      "reader",
      "token",
      "async",
      "promise",
      "parser",
      "decoder",
      "binary",
      "endian",
      "uint",
      "stream",
      "streaming"
    ],
    "packageManager": "yarn@4.3.1",
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v6/npm-strtok3-9.1.1-f8feb188b3fcdbf9b8819cc9211a824c3731df38-integrity/node_modules/strtok3/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Node.js CI](https://github.com/Borewit/strtok3/actions/workflows/nodejs-ci.yml/badge.svg?branch=master)](https://github.com/Borewit/strtok3/actions/workflows/nodejs-ci.yml?query=branch%3Amaster)\n[![CodeQL](https://github.com/Borewit/strtok3/actions/workflows/codeql.yml/badge.svg?branch=master)](https://github.com/Borewit/strtok3/actions/workflows/codeql.yml)\n[![NPM version](https://badge.fury.io/js/strtok3.svg)](https://npmjs.org/package/strtok3)\n[![npm downloads](http://img.shields.io/npm/dm/strtok3.svg)](https://npmcharts.com/compare/strtok3,token-types?start=1200&interval=30)\n[![DeepScan grade](https://deepscan.io/api/teams/5165/projects/8526/branches/103329/badge/grade.svg)](https://deepscan.io/dashboard#view=project&tid=5165&pid=8526&bid=103329)\n[![Known Vulnerabilities](https://snyk.io/test/github/Borewit/strtok3/badge.svg?targetFile=package.json)](https://snyk.io/test/github/Borewit/strtok3?targetFile=package.json)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/59dd6795e61949fb97066ca52e6097ef)](https://www.codacy.com/app/Borewit/strtok3?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Borewit/strtok3&amp;utm_campaign=Badge_Grade)\n# strtok3\n\nA promise based streaming [*tokenizer*](#tokenizer-object) for [Node.js](http://nodejs.org) and browsers.\n\nThe `strtok3` module provides several methods for creating a [*tokenizer*](#tokenizer-object) from various input sources. \nDesigned for:\n* Seamless support in streaming environments.\n* Efficiently decode binary data, strings, and numbers.\n* Reading [predefined](https://github.com/Borewit/token-types) or custom tokens.\n* Offering [*tokenizers*](#tokenizer-object) for reading from [files](#method-strtok3fromfile), [streams](#fromstream-function) or [Uint8Arrays](#frombuffer-function).\n\n### Features\n`strtok3` can read from:\n* Files, using a file path as input.\n* Node.js [streams](https://nodejs.org/api/stream.html).\n* [Buffer](https://nodejs.org/api/buffer.html) or [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n* HTTP chunked transfer provided by [@tokenizer/http](https://github.com/Borewit/tokenizer-http).\n* [Amazon S3](https://aws.amazon.com/s3) chunks with [@tokenizer/s3](https://github.com/Borewit/tokenizer-s3).\n\n## Installation\n\n```sh\nnpm install strtok3\n```\n\n### Compatibility\n\nStarting with version 7, the module has migrated from [CommonJS](https://en.wikipedia.org/wiki/CommonJS) to [pure ECMAScript Module (ESM)](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nThe distributed JavaScript codebase is compliant with the [ECMAScript 2020 (11th Edition)](https://en.wikipedia.org/wiki/ECMAScript_version_history#11th_Edition_%E2%80%93_ECMAScript_2020) standard.\n\n> [!NOTE]\n> This module requires a [Node.js â‰¥ 16](https://nodejs.org/en/about/previous-releases) engine.\n> It can also be used in a browser environment when bundled with a module bundler.\n\n## Support the Project\nIf you find this project useful and would like to support its development, consider sponsoring or contributing:\n\n- [Become a sponsor to Borewit](https://github.com/sponsors/Borewit)\n\n- Buy me a coffee:\n\n  <a href=\"https://www.buymeacoffee.com/borewit\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\" alt=\"Buy me A coffee\" height=\"41\" width=\"174\"></a>\n\n## API Documentation\n\n### strtok3 methods\n\nUse one of the methods to instantiate an [*abstract tokenizer*](#tokenizer-object):\n- [fromFile](#fromfile-function)[^1]\n- [fromStream](#fromstream-function)[^1]\n- [fromWebStream](#fromwebstream-function)\n- [fromBuffer](#frombuffer-function)\n\n[^1]: Only available when importing this module with Node.js\n\nAll methods return a [`Tokenizer`](#tokenizer-object), either directly or via a promise.\n\n#### `fromFile` function\n\nCreates a [*tokenizer*](#tokenizer-object) from a local file.\n\n```ts\nfunction fromFile(sourceFilePath: string): Promise<FileTokenizer>\n```  \n\n| Parameter      | Type     | Description                |\n|----------------|----------|----------------------------|\n| sourceFilePath | `string` | Path to file to read from  |\n\n> [!NOTE]\n> - Only available for Node.js engines\n> - `fromFile` automatically embeds [file-information](#file-information)\n\nReturns, via a promise, a [*tokenizer*](#tokenizer-object) which can be used to parse a file.\n\n```js\nimport * as strtok3 from 'strtok3';\nimport * as Token from 'token-types';\n\n(async () => {\n\n  const tokenizer = await strtok3.fromFile(\"somefile.bin\");\n         try {\n    const myNumber = await tokenizer.readToken(Token.UINT8);\n    console.log(`My number: ${myNumber}`);\n  } finally {\n    tokenizer.close(); // Close the file\n  }\n})();\n```\n\n#### `fromStream` function\n\nCreates a [*tokenizer*](#tokenizer-object) from a Node.js [readable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable).\n\n```ts\nfunction fromStream(stream: Readable, options?: ITokenizerOptions): Promise<ReadStreamTokenizer>\n```\n\n| Parameter |  Optional | Type                                                                                 | Description              |\n|-----------|-----------|-------------------------|--------------------------|\n| stream    | no        | [Readable](https://nodejs.org/api/stream.html#stream_class_stream_readable)         | Stream to read from      |\n| fileInfo  | yes       | [IFileInfo](#IFileInfo) | Provide file information |\n\nReturns a Promise providing a [*tokenizer*](#tokenizer-object).\n\n> [!NOTE]\n> - Only available for Node.js engines\n\n#### `fromWebStream` function\n\nCreates [*tokenizer*](#tokenizer-object) from a [WHATWG ReadableStream](https://nodejs.org/api/webstreams.html#web-streams-api).\n\n```ts\nfunction fromWebStream(webStream: AnyWebByteStream, options?: ITokenizerOptions): ReadStreamTokenizer\n```\n\n| Parameter      |  Optional | Type                                                                     | Description                        |\n|----------------|-----------|--------------------------------------------------------------------------|------------------------------------|\n| readableStream | no        | [ReadableStream](https://nodejs.org/api/webstreams.html#web-streams-api) | WHATWG ReadableStream to read from |\n| fileInfo       | yes       | [IFileInfo](#IFileInfo)                                                  | Provide file information           |\n\nReturns a Promise providing a [*tokenizer*](#tokenizer-object)\n\n```js\nimport strtok3 from 'strtok3';\nimport * as Token from 'token-types';\n\nstrtok3.fromWebStream(readableStream).then(tokenizer => {\n  return tokenizer.readToken(Token.UINT8).then(myUint8Number => {\n    console.log(`My number: ${myUint8Number}`);\n  });\n});\n```\n\n#### `fromBuffer()` function\n\nCreate a tokenizer from memory ([Uint8Array](https://nodejs.org/api/buffer.html)).\n\n```ts\nfunction fromBuffer(uint8Array: Uint8Array, options?: ITokenizerOptions): BufferTokenizer\n```\n\n| Parameter  | Optional | Type                                             | Description                            |\n|------------|----------|--------------------------------------------------|----------------------------------------|\n| uint8Array | no       | [Uint8Array](https://nodejs.org/api/buffer.html) | Uint8Array or Buffer to read from      |\n| fileInfo   | yes      | [IFileInfo](#IFileInfo)                          | Provide file information               |\n\nReturns a Promise providing a [*tokenizer*](#tokenizer-object).\n\n```js\nimport * as strtok3 from 'strtok3';\n\nconst tokenizer = strtok3.fromBuffer(buffer);\n\ntokenizer.readToken(Token.UINT8).then(myUint8Number => {\n  console.log(`My number: ${myUint8Number}`);\n});\n```\n\n### `Tokenizer` object\nThe *tokenizer* is an abstraction of a [stream](https://nodejs.org/api/stream.html), file or [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), allowing _reading_ or _peeking_ from the stream.\nIt can also be translated in chunked reads, as done in [@tokenizer/http](https://github.com/Borewit/tokenizer-http);\n\n#### Key Features:\n\n- Supports seeking within the stream using `tokenizer.ignore()`.\n- Offers `peek` methods to preview data without advancing the read pointer.\n- Maintains the read position via tokenizer.position.\n\n#### Tokenizer functions\n\n_Read_ methods advance the stream pointer, while _peek_ methods do not.\n\nThere are two kind of functions:\n1. *read* methods: used to read a *token* of [Buffer](https://nodejs.org/api/buffer.html) from the [*tokenizer*](#tokenizer-object). The position of the *tokenizer-stream* will advance with the size of the token.\n2. *peek* methods: same as the read, but it will *not* advance the pointer. It allows to read (peek) ahead.\n\n#### `readBuffer` function\n\nRead data from the _tokenizer_ into provided \"buffer\" (`Uint8Array`).\n`readBuffer(buffer, options?)`\n\n```ts\nreadBuffer(buffer: Uint8Array, options?: IReadChunkOptions): Promise<number>;\n```\n\n| Parameter  | Type                                                           | Description                                                                                                                                                                                                                            |\n|------------|----------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| buffer     | [Buffer](https://nodejs.org/api/buffer.html) &#124; Uint8Array | Target buffer to write the data read to                                                                                                                                                                                                |\n| options    | [IReadChunkOptions](#ireadchunkoptions)                        | An integer specifying the number of bytes to read                                                                                                                                                                                      |\n\nReturn promise with number of bytes read.\nThe number of bytes read maybe if less, *mayBeLess* flag was set.\n\n#### `peekBuffer` function\n\nPeek (read ahead), from [*tokenizer*](#tokenizer-object), into the buffer without advancing the stream pointer.\n\n```ts\npeekBuffer(uint8Array: Uint8Array, options?: IReadChunkOptions): Promise<number>;\n```\n\n| Parameter  | Type                                    | Description                                         |\n|------------|-----------------------------------------|-----------------------------------------------------|\n| buffer     | Buffer &#124; Uint8Array                | Target buffer to write the data read (peeked) to.   |\n| options    | [IReadChunkOptions](#ireadchunkoptions) | An integer specifying the number of bytes to read.  |                                                                                                                           |\n\nReturn value `Promise<number>` Promise with number of bytes read. The number of bytes read maybe if less, *mayBeLess* flag was set.\n\n#### `readToken` function\n\nRead a *token* from the tokenizer-stream.\n\n```ts\nreadToken<Value>(token: IGetToken<Value>, position: number = this.position): Promise<Value>\n```  \n\n| Parameter  | Type                    | Description                                                                                                           |\n|------------|-------------------------|---------------------------------------------------------------------------------------------------------------------- |\n| token      | [IGetToken](#IGetToken) | Token to read from the tokenizer-stream.                                                                              |\n| position?  | number                  | Offset where to begin reading within the file. If position is null, data will be read from the current file position. |\n\nReturn value `Promise<number>`. Promise with number of bytes read. The number of bytes read maybe if less, *mayBeLess* flag was set.\n\n#### `peek` function\n\nPeek a *token* from the [*tokenizer*](#tokenizer-object).\n\n```ts\npeekToken<Value>(token: IGetToken<Value>, position: number = this.position): Promise<Value>\n```\n\n| Parameter  | Type                       | Description                                                                                                             |\n|------------|----------------------------|-------------------------------------------------------------------------------------------------------------------------|\n| token      | [IGetToken<T>](#IGetToken) | Token to read from the tokenizer-stream.                                                                                |\n| position?  | number                     | Offset where to begin reading within the file. If position is null, data will be read from the current file position.   |\n\nReturn a promise with the token value peeked from the [*tokenizer*](#tokenizer-object).\n\n#### `readNumber` function\n\nPeek a numeric [*token*](#token) from the [*tokenizer*](#tokenizer-object).\n\n```ts\nreadNumber(token: IToken<number>): Promise<number>\n```\n\n| Parameter  | Type                            | Description                                        |\n|------------|---------------------------------|----------------------------------------------------|\n| token      | [IGetToken<number>](#IGetToken) | Numeric token to read from the tokenizer-stream.   |\n\nReturns a promise with the decoded numeric value from the *tokenizer-stream*.\n\n#### `ignore` function\n\nAdvance the offset pointer with the token number of bytes provided.\n\n```ts\nignore(length: number): Promise<number>\n```\n\n| Parameter  | Type   | Description                                                          |\n|------------|--------|----------------------------------------------------------------------|\n| ignore     | number | Numeric of bytes to ignore. Will advance the `tokenizer.position`    |\n\nReturns a promise with the decoded numeric value from the *tokenizer-stream*.\n\n#### `close` function\nClean up resources, such as closing a file pointer if applicable.\n\n#### `Tokenizer` attributes\n\n- `fileInfo`\n\n  Optional attribute describing the file information, see [IFileInfo](#IFileInfo)\n\n- `position`\n\n  Pointer to the current position in the [*tokenizer*](#tokenizer-object) stream.\n  If a *position* is provided to a _read_ or _peek_ method, is should be, at least, equal or greater than this value.\n\n### `IReadChunkOptions` interface\n\nEach attribute is optional:\n\n| Attribute | Type    | Description                                                                                                                                                                                                                   |\n|-----------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| offset    | number  | The offset in the buffer to start writing at; if not provided, start at 0                                                                                                                                                     |\n| length    | number  | Requested number of bytes to read.                                                                                                                                                                                            |\n| position  | number  | Position where to peek from the file. If position is null, data will be read from the [current file position](#attribute-tokenizerposition). Position may not be less then [tokenizer.position](#attribute-tokenizerposition) |\n| mayBeLess | boolean | If and only if set, will not throw an EOF error if less then the requested *mayBeLess* could be read.                                                                                                                         |\n\nExample usage:\n```js\n  tokenizer.peekBuffer(buffer, {mayBeLess: true});\n```\n\n### `IFileInfo` interface\n\nProvides optional metadata about the file being tokenized.\n\n| Attribute | Type    | Description                                                                                       |\n|-----------|---------|---------------------------------------------------------------------------------------------------|\n| size      | number  | File size in bytes                                                                                |\n| mimeType  | number  | [MIME-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of file. |\n| path      | number  | File path                                                                                         |\n| url       | boolean | File URL                                                                                          |\n\n### `Token` object\n\nThe *token* is basically a description what to read form the [*tokenizer-stream*](#tokenizer-object).\nA basic set of *token types* can be found here: [*token-types*](https://github.com/Borewit/token-types).\n\nA token is something which implements the following interface:\n```ts\nexport interface IGetToken<T> {\n\n  /**\n   * Length in bytes of encoded value\n   */\n  len: number;\n\n  /**\n   * Decode value from buffer at offset\n   * @param buf Buffer to read the decoded value from\n   * @param off Decode offset\n   */\n  get(buf: Uint8Array, off: number): T;\n}\n```\nThe *tokenizer* reads `token.len` bytes from the *tokenizer-stream* into a Buffer.\nThe `token.get` will be called with the Buffer. `token.get` is responsible for conversion from the buffer to the desired output type.\n\n### Working with Web-API readable stream\nTo convert a [Web-API readable stream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader) into a [Node.js readable stream]((https://nodejs.org/api/stream.html#stream_readable_streams)), you can use [readable-web-to-node-stream](https://github.com/Borewit/readable-web-to-node-stream) to convert one in another.\n\n```js\nimport { fromWebStream } strtok3 from 'strtok3';\nimport { ReadableWebToNodeStream } from 'readable-web-to-node-stream';\n\n(async () => {\n\n  const response = await fetch(url);\n  const readableWebStream = response.body; // Web-API readable stream\n  const webStream = new ReadableWebToNodeStream(readableWebStream); // convert to Node.js readable stream\n\n  const tokenizer = fromWebStream(webStream); // And we now have tokenizer in a web environment\n})();\n```\n\n## Dependencies\n\nThe diagram below illustrates the primary dependencies of `strtok3`:\n```mermaid\ngraph TD;\n  S(strtok3)-->P(peek-readable)\n  S(strtok3)-->TO(\"@tokenizer/token\")\n```\n- \n- [peek-readable](https://github.com/Borewit/peek-readable): Manages reading operations with peeking capabilities, allowing data to be previewed without advancing the read pointer.\n- [@tokenizer/token](https://github.com/Borewit/tokenizer-token): Provides token definitions and utilities used by `strtok3` for interpreting binary data.\n\n## Licence\n\n(The MIT License)\n\nCopyright (c) 2024 Borewit\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "licenseText": "Copyright (c) 2017, Borewit\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/strtok3/-/strtok3-9.1.1.tgz#f8feb188b3fcdbf9b8819cc9211a824c3731df38",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/strtok3/-/strtok3-9.1.1.tgz",
    "hash": "f8feb188b3fcdbf9b8819cc9211a824c3731df38",
    "integrity": "sha512-FhwotcEqjr241ZbjFzjlIYg6c5/L/s4yBGWSMvJ9UoExiSqL+FnFA/CaeZx17WGaZMS/4SOZp8wH18jSS4R4lw==",
    "registry": "npm",
    "packageName": "strtok3",
    "cacheIntegrity": "sha512-FhwotcEqjr241ZbjFzjlIYg6c5/L/s4yBGWSMvJ9UoExiSqL+FnFA/CaeZx17WGaZMS/4SOZp8wH18jSS4R4lw== sha1-+P6xiLP82/m4gZzJIRqCTDcx3zg="
  },
  "registry": "npm",
  "hash": "f8feb188b3fcdbf9b8819cc9211a824c3731df38"
}
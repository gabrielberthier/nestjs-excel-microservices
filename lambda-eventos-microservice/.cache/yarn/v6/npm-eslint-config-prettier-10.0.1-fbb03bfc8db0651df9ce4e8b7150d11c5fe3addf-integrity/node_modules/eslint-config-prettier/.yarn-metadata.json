{
  "manifest": {
    "name": "eslint-config-prettier",
    "version": "10.0.1",
    "license": "MIT",
    "author": {
      "name": "Simon Lydell"
    },
    "description": "Turns off all rules that are unnecessary or might conflict with Prettier.",
    "repository": {
      "type": "git",
      "url": "https://github.com/prettier/eslint-config-prettier.git"
    },
    "bin": {
      "eslint-config-prettier": "build/bin/cli.js"
    },
    "main": "build/index.js",
    "files": [
      "build"
    ],
    "keywords": [
      "eslint",
      "eslintconfig",
      "eslint-config",
      "eslint-prettier",
      "prettier"
    ],
    "peerDependencies": {
      "eslint": ">=7.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v6/npm-eslint-config-prettier-10.0.1-fbb03bfc8db0651df9ce4e8b7150d11c5fe3addf-integrity/node_modules/eslint-config-prettier/package.json",
    "readmeFilename": "README.md",
    "readme": "# eslint-config-prettier\n\nTurns off all rules that are unnecessary or might conflict with [Prettier].\n\nThis lets you use your favorite shareable config without letting its stylistic choices get in the way when using Prettier.\n\nNote that this config _only_ turns rules _off,_ so it only makes sense using it together with some other config.\n\n[prettier]: https://github.com/prettier/prettier\n\n## Installation\n\n1. Install eslint-config-prettier:\n\n   ```\n   npm install --save-dev eslint-config-prettier\n   ```\n\n2. Add eslint-config-prettier to your ESLint configuration ‚Äì either to [eslintrc] or to [eslint.config.js (flat config)].\n\n   - eslintrc: Add `\"prettier\"` to the \"extends\" array in your `.eslintrc.*` file. Make sure to put it **last,** so it gets the chance to override other configs.\n\n     <!-- prettier-ignore -->\n     ```json\n     {\n       \"extends\": [\n         \"some-other-config-you-use\",\n         \"prettier\"\n       ]\n     }\n     ```\n\n   - eslint.config.js (flat config): Import eslint-config-prettier, and put it in the configuration array ‚Äì **after** other configs that you want to override.\n\n     <!-- prettier-ignore -->\n     ```js\n     import someConfig from \"some-other-config-you-use\";\n     import eslintConfigPrettier from \"eslint-config-prettier\";\n\n     export default [\n       someConfig,\n       eslintConfigPrettier,\n     ];\n     ```\n\n3. Finally, run the [CLI helper tool](#cli-helper-tool) to find problems in the `\"rules\"` sections of your config.\n\n> üëâ Using [eslint-plugin-prettier]? Check out [eslint-plugin-prettier‚Äôs recommended config][eslint-plugin-prettier-recommended].\n\n### Plugins\n\neslint-config-prettier not only turns off _core_ rules, but also some from these plugins automatically:\n\n- [@typescript-eslint/eslint-plugin]\n- [@babel/eslint-plugin]\n- [eslint-plugin-babel]\n- [eslint-plugin-flowtype]\n- [eslint-plugin-react]\n- [eslint-plugin-standard]\n- [eslint-plugin-unicorn]\n- [eslint-plugin-vue]\n\n> ‚ÑπÔ∏è Note: You might find guides on the Internet saying you should also extend stuff like `\"prettier/react\"`. Since version 8.0.0 of eslint-config-prettier, all you need to extend is `\"prettier\"`! That includes all plugins.\n\n#### eslint.config.js (flat config) plugin caveat\n\nWith flat config, _you_ get to decide the plugin name! For example:\n\n```js\nimport typescriptEslint from \"@typescript-eslint/eslint-plugin\";\nimport eslintConfigPrettier from \"eslint-config-prettier\";\n\nexport default [\n  {\n    plugins: {\n      // You‚Äôd typically use one of the following two:\n      // typescriptEslint: typescriptEslint,\n      // typescriptEslint,\n      // But in this example we give it another name.\n      // It might be tempting to use something shorter like ‚Äúts‚Äù:\n      ts: typescriptEslint, // üö® Don‚Äôt do this!\n    },\n    rules: {\n      // With eslintrc, this is _always_ called:\n      // @typescript-eslint/indent\n      // But in eslint.config.js (flat config), the name chosen above in `plugins` is used.\n      \"ts/indent\": \"error\", // üö® Don‚Äôt do this!\n    },\n  },\n  eslintConfigPrettier,\n];\n```\n\nYou might expect eslint-config-prettier to turn off `ts/indent`, but it won‚Äôt! Because eslint-config-prettier only turns off `@typescript-eslint/indent`. It cannot know what you chose to call the plugin. Same thing for the CLI helper tool.\n\nSimply stick to the official plugin names and you‚Äôll be all good.\n\nIf you encounter a shared _config_ that uses a non-standard plugin name, please ask them to use the standard name instead.\n\n### Excluding deprecated rules\n\nSome of the rules that eslint-config-prettier turns off may be deprecated, or even removed from ESLint. **This is perfectly fine,** but if you really need to omit the deprecated and removed rules, you can do so by setting the `ESLINT_CONFIG_PRETTIER_NO_DEPRECATED` environment variable to a non-empty value. For example:\n\n```\nenv ESLINT_CONFIG_PRETTIER_NO_DEPRECATED=true npx eslint-find-rules --deprecated index.js\n```\n\n## CLI helper tool\n\neslint-config-prettier also ships with a little CLI tool to help you check if your configuration contains any rules that are unnecessary or conflict with Prettier. Here‚Äôs how to run it:\n\n```\nnpx eslint-config-prettier path/to/main.js\n```\n\n(Change `path/to/main.js` to a file that exists in your project.)\n\n### What and why\n\nNow, let‚Äôs have a look at what it does and why you might want to use it.\n\nüö® This eslintrc example has a **conflicting rule** `\"indent\"` enabled:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"extends\": [\n    \"some-other-config-you-use\",\n    \"prettier\"\n  ],\n  \"rules\": {\n    \"indent\": \"error\"\n  }\n}\n```\n\nFor eslintrc, while the `\"prettier\"` config can disable problematic rules in `\"some-other-config-you-use\"`, it cannot touch `\"rules\"`! (That‚Äôs how ESLint works ‚Äì it lets you override configs you extend.) The CLI helper tool reports that `\"indent\"` conflicts with Prettier, so you can remove it. (Which is nice ‚Äì simplifying your config!)\n\nüö® This eslint.config.js (flat config) example also has a **conflicting rule** `\"indent\"` enabled:\n\n```js\nimport someConfig from \"some-other-config-you-use\";\nimport eslintConfigPrettier from \"eslint-config-prettier\";\n\nexport default [\n  someConfig,\n  eslintConfigPrettier,\n  {\n    rules: {\n      indent: \"error\",\n    },\n  },\n];\n```\n\nWith the new ESLint ‚Äúflat config‚Äù format, you can control what things override what yourself. One way of solving the above conflict is to reorder the config objects so that eslint-config-prettier is last:\n\n```js\nimport someConfig from \"some-other-config-you-use\";\nimport eslintConfigPrettier from \"eslint-config-prettier\";\n\nexport default [\n  someConfig,\n  {\n    rules: {\n      indent: \"error\",\n    },\n  },\n  eslintConfigPrettier, // eslint-config-prettier last\n];\n```\n\nHowever, looking at the above config might feel confusing. It looks like we enable the `indent` rule, but in reality it‚Äôs disabled thanks to the `eslintConfigPrettier` line below it. Instead you might want to actually have your own rules _after_ eslint-config-prettier and run the CLI helper tool to find out about problems, so you can remove conflicting rules from the config file altogether (simplifying your config).\n\n### Checking multiple files\n\nIn theory you need to run the tool for every single file in your project to be 100% sure that there are no conflicting rules, because ESLint supports having different rules for different files. Usually you‚Äôll have about the same rules for all files, so it is good enough to run the command on one file. But if you use [multiple configuration files] or [overrides], you can provide several files to check:\n\n```\nnpx eslint-config-prettier index.js test/index.js legacy/main.js\n```\n\n### Exit codes\n\n- 0: No problems found.\n- 1: Unexpected error.\n- 2: Conflicting rules found.\n\n### ESLINT_USE_FLAT_CONFIG environment variable\n\nJust like ESLint itself, you can control the eslint-config-prettier CLI helper tool using the `ESLINT_USE_FLAT_CONFIG` environment variable:\n\n- `ESLINT_USE_FLAT_CONFIG=true`: Only use eslint.config.js (flat config).\n- `ESLINT_USE_FLAT_CONFIG=false`: Only use eslintrc files.\n- Unset or any other value: First try eslint.config.js, then eslintrc.\n\n> **Warning**  \n> For eslint.config.js (flat config), the CLI helper tool imports `eslint/use-at-your-own-risk` which may break at any time.\n\n### Legacy\n\neslint-config-prettier versions before 7.0.0 had a slightly different CLI tool that was run in a different way. For example:\n\n```\nnpx eslint --print-config index.js | npx eslint-config-prettier-check\n```\n\nIf you find something like that in a tutorial, this is what the command looks like in 7.0.0 or later:\n\n```\nnpx eslint-config-prettier index.js\n```\n\n## Special rules\n\nThere a few rules that eslint-config-prettier disables that actually can be enabled in some cases.\n\n- Some require certain options. The CLI helper tool validates this.\n- Some require special attention when writing code. The CLI helper tool warns you if any of those rules are enabled, but can‚Äôt tell if anything is problematic.\n- Some can cause problems if using [eslint-plugin-prettier] and `--fix`.\n\nFor maximum ease of use, the special rules are disabled by default (provided that you include all needed things in `\"extends\"`). If you want them, you need to explicitly specify them in your ESLint config.\n\n### [arrow-body-style] and [prefer-arrow-callback]\n\n**These rules might cause problems if using [eslint-plugin-prettier] and `--fix`.**\n\nSee the [`arrow-body-style` and `prefer-arrow-callback` issue][eslint-plugin-prettier-autofix-issue] for details.\n\nThere are a couple of ways to turn these rules off:\n\n- Put `\"plugin:prettier/recommended\"` in your `\"extends\"`. That‚Äôs [eslint-<strong>plugin</strong>-prettier‚Äôs recommended config][eslint-plugin-prettier-recommended].\n- Put `\"prettier/prettier\"` in your `\"extends\"`. (Yes, there‚Äôs both a _rule_ called `\"prettier/prettier\"` and a _config_ called `\"prettier/prettier\"`.)\n- Remove them from your config or turn them off manually.\n\nIt doesn‚Äôt matter which approach you use. `\"plugin:prettier/recommended\"` is probably the easiest.\n\nNote: The CLI tool only reports these as problematic if the `\"prettier/prettier\"` _rule_ is enabled for the same file.\n\nThese rules are safe to use if you don‚Äôt use [eslint-plugin-prettier]. In other words, if you run `eslint --fix` and `prettier --write` as separate steps.\n\n### [curly]\n\n**This rule requires certain options.**\n\nIf a block (for example after `if`, `else`, `for` or `while`) contains only one statement, JavaScript allows omitting the curly braces around that statement. This rule enforces if or when those optional curly braces should be omitted.\n\nIf you use the `\"multi-line\"` or `\"multi-or-nest\"` option, the rule can conflict with Prettier.\n\nFor example, the `\"multi-line\"` option allows this line:\n\n<!-- prettier-ignore -->\n```js\nif (cart.items && cart.items[0] && cart.items[0].quantity === 0) updateCart(cart);\n```\n\nHowever, Prettier might consider the line too long and turn it into the following, which the `\"multi-line\"` option does _not_ allow:\n\n<!-- prettier-ignore -->\n```js\nif (cart.items && cart.items[0] && cart.items[0].quantity === 0)\n  updateCart(cart);\n```\n\nIf you like this rule, it can be used just fine with Prettier as long as you don‚Äôt use the `\"multi-line\"` or `\"multi-or-nest\"` option.\n\nExample ESLint configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"curly\": [\"error\", \"all\"]\n  }\n}\n```\n\n### [lines-around-comment] \\(deprecated)\n\n(The following applies to [@stylistic/lines-around-comment], [@stylistic/js/lines-around-comment], [@stylistic/ts/lines-around-comment], and [@typescript-eslint/lines-around-comment] as well.)\n\n**This rule can be used with certain options.**\n\nThis rule requires empty lines before and/or after comments. Prettier preserves blank lines, with two exceptions:\n\n- Several blank lines in a row are collapsed into a single blank line. This is fine.\n- Blank lines at the beginning and end of blocks, objects and arrays are always removed. This may lead to conflicts.\n\nBy default, ESLint requires a blank line above the comment is this case:\n\n<!-- prettier-ignore -->\n```js\nif (result) {\n\n  /* comment */\n  return result;\n}\n```\n\nHowever, Prettier removes the blank line:\n\n<!-- prettier-ignore -->\n```js\nif (result) {\n  /* comment */\n  return result;\n}\n```\n\nIf you like this rule, it can be used just fine with Prettier as long as you add some extra configuration to allow comments at the start and end of blocks, objects and arrays.\n\nExample ESLint configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"lines-around-comment\": [\n      \"error\",\n      {\n        \"beforeBlockComment\": true,\n        \"afterBlockComment\": true,\n        \"beforeLineComment\": true,\n        \"afterLineComment\": true,\n        \"allowBlockStart\": true,\n        \"allowBlockEnd\": true,\n        \"allowObjectStart\": true,\n        \"allowObjectEnd\": true,\n        \"allowArrayStart\": true,\n        \"allowArrayEnd\": true\n      }\n    ]\n  }\n}\n```\n\n### [max-len] \\(deprecated)\n\n(The following applies to [@stylistic/max-len], [@stylistic/js/max-len], and [vue/max-len] as well.)\n\n**This rule requires special attention when writing code.**\n\nUsually, Prettier takes care of following a maximum line length automatically. However, there are cases where Prettier can‚Äôt do anything, such as for long strings, regular expressions and comments. Those need to be split up by a human.\n\nIf you‚Äôd like to enforce an even stricter maximum line length policy than Prettier can provide automatically, you can enable this rule. Just remember to keep `max-len`‚Äôs options and Prettier‚Äôs `printWidth` option in sync.\n\nKeep in mind that you might have to refactor code slightly if Prettier formats lines in a way that the `max-len` rule does not approve of.\n\nExample ESLint configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"max-len\": [\"error\", {\"code\": 80, \"ignoreUrls\": true}]\n  }\n}\n```\n\n### [no-confusing-arrow] \\(deprecated)\n\n(The following applies to [@stylistic/no-confusing-arrow] and [@stylistic/js/no-confusing-arrow] as well.)\n\n**This rule requires certain options.**\n\nFor example, the rule could warn about this line:\n\n<!-- prettier-ignore -->\n```js\nvar x = a => 1 ? 2 : 3;\n```\n\nWith `{allowParens: true}` (the default since ESLint 6.0.0), adding parentheses is considered a valid way to avoid the arrow confusion:\n\n<!-- prettier-ignore -->\n```js\nvar x = a => (1 ? 2 : 3);\n```\n\nWhile Prettier keeps those parentheses, it removes them if the line is long enough to introduce a line break:\n\n<!-- prettier-ignore -->\n```js\nEnterpriseCalculator.prototype.calculateImportantNumbers = inputNumber =>\n  1 ? 2 : 3;\n```\n\nWith `{allowParens: false}`, ESLint instead suggests switching to an explicit return:\n\n<!-- prettier-ignore -->\n```js\nvar x = a => { return 1 ? 2 : 3; };\n```\n\nThat causes no problems with Prettier.\n\nIf you like this rule, it can be used just fine with Prettier as long as the `allowParens` option is off.\n\nExample ESLint configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"no-confusing-arrow\": [\"error\", { \"allowParens\": false }]\n  }\n}\n```\n\n(Note: The CLI helper tool considers `{allowParens: true}` to be the default, which is the case since ESLint 6.0.0. The tool will produce a warning if you use the default even if you use an older version of ESLint. It doesn‚Äôt hurt to explicitly set `{allowParens: false}` even though it is technically redundant. This way you are prepared for a future ESLint upgrade and the CLI tool can be kept simple.)\n\n### [no-mixed-operators] \\(deprecated)\n\n(The following applies to [@stylistic/no-mixed-operators] and [@stylistic/js/no-mixed-operators] as well.)\n\n**This rule requires special attention when writing code.**\n\nThis rule forbids mixing certain operators, such as `&&` and `||`.\n\nFor example, the rule could warn about this line:\n\n<!-- prettier-ignore -->\n```js\nvar foo = a + b * c;\n```\n\nThe rule suggests adding parentheses, like this:\n\n<!-- prettier-ignore -->\n```js\nvar foo = a + (b * c);\n```\n\nHowever, Prettier removes many ‚Äúunnecessary‚Äù parentheses, turning it back to:\n\n<!-- prettier-ignore -->\n```js\nvar foo = a + b * c;\n```\n\nIf you want to use this rule with Prettier, you need to split the expression into another variable:\n\n<!-- prettier-ignore -->\n```js\nvar bar = b * c;\nvar foo = a + bar;\n```\n\nKeep in mind that Prettier prints _some_ ‚Äúunnecessary‚Äù parentheses, though:\n\n<!-- prettier-ignore -->\n```js\nvar foo = (a && b) || c;\n```\n\nExample ESLint configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"no-mixed-operators\": \"error\"\n  }\n}\n```\n\n### [no-tabs] \\(deprecated)\n\n(The following applies to [@stylistic/no-tabs] and [@stylistic/js/no-tabs] as well.)\n\n**This rule requires certain options.**\n\nThis rule disallows the use of tab characters. By default the rule forbids _all_ tab characters. That can be used just fine with Prettier as long as you don‚Äôt configure Prettier to indent using tabs.\n\nLuckily, it‚Äôs possible to configure the rule so that it works regardless of whether Prettier uses spaces or tabs: Set `allowIndentationTabs` to `true`. This way Prettier takes care of your indentation, while the `no-tabs` takes care of potential tab characters anywhere else in your code.\n\nExample ESLint configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"no-tabs\": [\"error\", {\"allowIndentationTabs\": true}]\n  }\n}\n```\n\n### [no-unexpected-multiline]\n\n**This rule requires special attention when writing code.**\n\nThis rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.\n\nFor example, the rule could warn about this:\n\n<!-- prettier-ignore -->\n```js\nvar hello = \"world\"\n[1, 2, 3].forEach(addNumber)\n```\n\nPrettier usually formats this in a way that makes it obvious that a semicolon was missing:\n\n<!-- prettier-ignore -->\n```js\nvar hello = \"world\"[(1, 2, 3)].forEach(addNumber);\n```\n\nHowever, there are cases where Prettier breaks things into several lines such that the `no-unexpected-multiline` conflicts.\n\n<!-- prettier-ignore -->\n```js\nconst value = text.trim().split(\"\\n\")[position].toLowerCase();\n```\n\nPrettier breaks it up into several lines, though, causing a conflict:\n\n<!-- prettier-ignore -->\n```js\nconst value = text\n  .trim()\n  .split(\"\\n\")\n  [position].toLowerCase();\n```\n\nIf you like this rule, it can usually be used with Prettier without problems, but occasionally you might need to either temporarily disable the rule or refactor your code.\n\n<!-- prettier-ignore -->\n```js\nconst value = text\n  .trim()\n  .split(\"\\n\")\n  // eslint-disable-next-line no-unexpected-multiline\n  [position].toLowerCase();\n\n// Or:\n\nconst lines = text.trim().split(\"\\n\");\nconst value = lines[position].toLowerCase();\n```\n\n**Note:** If you _do_ enable this rule, you have to run ESLint and Prettier as two separate steps (and ESLint first) in order to get any value out of it. Otherwise Prettier might reformat your code in such a way that ESLint never gets a chance to report anything (as seen in the first example).\n\nExample configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"no-unexpected-multiline\": \"error\"\n  }\n}\n```\n\n### [quotes] \\(deprecated)\n\n(The following applies to [babel/quotes], [@stylistic/quotes], [@stylistic/js/quotes], [@stylistic/ts/quotes], and [@typescript-eslint/quotes] as well.)\n\n**This rule requires certain options and certain Prettier options.**\n\nUsually, you don‚Äôt need this rule at all. But there are two cases where it could be useful:\n\n- To enforce the use of backticks rather than single or double quotes for strings.\n- To forbid backticks where regular strings could have been used.\n\n#### Enforce backticks\n\nIf you‚Äôd like all strings to use backticks (never quotes), enable the `\"backtick\"` option.\n\nExample ESLint configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"quotes\": [\"error\", \"backtick\"]\n  }\n}\n```\n\n#### Forbid unnecessary backticks\n\nIn the following example, the first array item could have been written with quotes instead of backticks.\n\n<!-- prettier-ignore -->\n```js\nconst strings = [\n  `could have been a regular string`,\n  `\n    multiple\n    lines\n  `,\n  `uses ${interpolation}`,\n  String.raw`\\tagged/`,\n];\n```\n\nIf you‚Äôd like ESLint to enforce `` `could have been a regular string` `` being written as either `\"could have been a regular string\"` or `'could have been a regular string'`, you need to use some specific configuration. The `quotes` rule has two options, a string option and an object option.\n\n- The first (string) option needs to be set to `\"single\"` or `\"double\"` and be kept in sync with Prettier‚Äôs [singleQuote] option.\n- The second (object) option needs the following properties:\n  - `\"avoidEscape\": true` to follow Prettier‚Äôs [string formatting rules].\n  - `\"allowTemplateLiterals\": false` to disallow unnecessary backticks.\n\n##### Example double quote configuration\n\nESLint:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"quotes\": [\n      \"error\",\n      \"double\",\n      { \"avoidEscape\": true, \"allowTemplateLiterals\": false }\n    ]\n  }\n}\n```\n\nPrettier (this is the default, so adding this is not required):\n\n<!-- prettier-ignore -->\n```json\n{\n  \"singleQuote\": false\n}\n```\n\n##### Example single quote configuration\n\nESLint:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"quotes\": [\n      \"error\",\n      \"single\",\n      { \"avoidEscape\": true, \"allowTemplateLiterals\": false }\n    ]\n  }\n}\n```\n\nPrettier:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"singleQuote\": true\n}\n```\n\n### [unicorn/template-indent]\n\n**This rule can be used with certain options.**\n\nThis rule will automatically fix the indentation of multiline string templates, to keep them in alignment with the code they are found in. A configurable whitelist is used to ensure no whitespace-sensitive strings are edited.\n\nPrettier deals with:\n\n- HTML\n- CSS\n- GraphQL\n- markdown\n\nUsing various tags, functions and comments.\n\n`unicorn/template-indent` by default formats some of the same tagged templates, which can cause conflicts. For example, the rule and Prettier disagree about indentation in ternaries:\n\n```js\ncondition\n  ? null\n  : html`\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam in dui\n        mauris.\n      </p>\n    `;\n```\n\nIf you like this rule, it can be used just fine with Prettier as long as you configure the rule to not deal with the same templates as Prettier.\n\nExample ESLint configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"unicorn/template-indent\": [\n      \"error\",\n      {\n        \"tags\": [\n          \"outdent\",\n          \"dedent\",\n          \"sql\",\n          \"styled\"\n        ],\n        \"functions\": [\n          \"dedent\",\n          \"stripIndent\"\n        ],\n        \"selectors\": [],\n        \"comments\": [\n          \"indent\"\n        ]\n      }\n    ]\n  }\n}\n```\n\nNote: If you use `\"selectors\"`, the CLI helper tool cannot detect if your selectors might cause conflicts.\n\n### [vue/html-self-closing]\n\n**This rule requires certain options.**\n\nThis rule enforces whether elements should be self-closing or not.\n\nPrettier generally preserves the way you wrote your elements:\n\n<!-- prettier-ignore -->\n```vue\n<div />\n<div></div>\n<MyComponent />\n<MyComponent></MyComponent>\n<svg><path d=\"\" /></svg>\n<svg><path d=\"\"></path></svg>\n```\n\nBut for known _void_ HTML elements, Prettier always uses the self-closing style. For example, `<img>` is turned into `<img />`.\n\nIf you like this rule, it can be used just fine with Prettier as long as you set `html.void` to `\"any\"`.\n\nExample ESLint configuration:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"vue/html-self-closing\": [\n      \"error\",\n      {\n        \"html\": {\n          \"void\": \"any\"\n        }\n      }\n    ]\n  }\n}\n```\n\n## Other rules worth mentioning\n\nThese rules don‚Äôt conflict with Prettier, but have some gotchas when used with Prettier.\n\n### [no-sequences]\n\nThis rule forbids using JavaScript‚Äôs confusing comma operator (sequence expressions). This piece of code is not doing what it looks like:\n\n<!-- prettier-ignore -->\n```js\nmatrix[4, 7];\n```\n\nPrettier adds parentheses to the above to make it clear that a sequence expression is used:\n\n<!-- prettier-ignore -->\n```js\nmatrix[(4, 7)];\n```\n\nHowever, the `no-sequences` rule allows comma operators if the expression sequence is explicitly wrapped in parentheses. Since Prettier automatically wraps them in parentheses, you might never see any warnings from ESLint about comma operators.\n\nEnding up with an accidental sequence expression can easily happen while refactoring. If you want ESLint to catch such mistakes, it is recommended to forbid sequence expressions entirely using [no-restricted-syntax] \\([as mentioned in the `no-sequences` documentation][no-sequences-full]):\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\"error\", \"SequenceExpression\"]\n  }\n}\n```\n\nIf you still need to use the comma operator for some edge case, you can place an `// eslint-disable-next-line no-restricted-syntax` comment on the line above the expression. `no-sequences` can safely be disabled if you use the `no-restricted-syntax` approach.\n\nYou can also supply a custom message if you want:\n\n<!-- prettier-ignore -->\n```json\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\n      \"error\",\n      {\n        \"selector\": \"SequenceExpression\",\n        \"message\": \"The comma operator is confusing and a common mistake. Don‚Äôt use it!\"\n      }\n    ]\n  }\n}\n```\n\n## Contributing\n\nSee [package.json] for the exact versions of ESLint, Prettier and ESLint plugins that eslint-config-prettier has been tested with.\n\nHave new rules been added since those versions? Have we missed any rules? Is there a plugin you would like to see exclusions for? Open an issue or a pull request!\n\nIf you‚Äôd like to add support for eslint-plugin-foobar, this is how you‚Äôd go about it:\n\nFirst, add rules to `index.js`:\n\n<!-- prettier-ignore -->\n```js\n\"foobar/some-rule\": \"off\"\n```\n\nThen, create `test-lint/foobar.js`:\n\n<!-- prettier-ignore -->\n```js\n/* eslint-disable quotes */\n\"use strict\";\n\n// Prettier does not want spaces before the parentheses, but\n// `plugin:foobar/recommended` wants one.\nconsole.log();\n```\n\n`test-lint/foobar.js` must fail when used with eslint-plugin-foobar and eslint-plugin-prettier at the same time ‚Äì until eslint-config-prettier is added to the ESLint config. The file should be formatted according to Prettier, and that formatting should disagree with the plugin.\n\nFinally, you need to mention the plugin in several places:\n\n- Add eslint-plugin-foobar to the \"devDependencies\" field in `package.json`.\n- Make sure that at least one rule from eslint-plugin-foobar gets used in `.eslintrc.base.js` and `eslint.base.config.js`.\n- Add it to the lists of supported plugins in this `README.md`.\n\nWhen you‚Äôre done, run `npm test` to verify that you got it all right. It runs several other npm scripts:\n\n- `\"test:prettier\"` checks that Prettier has been run on all files.\n- `\"test:eslint\"` makes sure that the files in `test-lint/` pass ESLint when the exclusions from eslint-config-prettier are used. It also lints the code of eslint-config-prettier itself.\n- `\"test:lint-verify-fail\"` is run by a test in `test/lint-verify-fail.test.js`.\n- `\"test:lint-rules\"` is run by a test in `test/rules.test.js`.\n- `\"test:jest\"` runs unit tests that check a number of things:\n  - That eslint-plugin-foobar is mentioned in all the places shown above.\n  - That no unknown rules are turned off. This helps catching typos, for example.\n  - That the CLI works.\n- `\"test:cli-sanity\"` and `\"test:cli-sanity-warning\"` are sanity checks for the CLI.\n\n## License\n\n[MIT](LICENSE).\n\n[@babel/eslint-plugin]: https://github.com/babel/babel/tree/main/eslint/babel-eslint-plugin\n[@stylistic/lines-around-comment]: https://eslint.style/rules/default/lines-around-comment\n[@stylistic/js/lines-around-comment]: https://eslint.style/rules/js/lines-around-comment\n[@stylistic/ts/lines-around-comment]: https://eslint.style/rules/ts/lines-around-comment\n[@stylistic/max-len]: https://eslint.style/rules/default/max-len\n[@stylistic/js/max-len]: https://eslint.style/rules/js/max-len\n[@stylistic/no-confusing-arrow]: https://eslint.style/rules/default/no-confusing-arrow\n[@stylistic/js/no-confusing-arrow]: https://eslint.style/rules/js/no-confusing-arrow\n[@stylistic/no-mixed-operators]: https://eslint.style/rules/default/no-mixed-operators\n[@stylistic/js/no-mixed-operators]: https://eslint.style/rules/js/no-mixed-operators\n[@stylistic/no-tabs]: https://eslint.style/rules/default/no-tabs\n[@stylistic/js/no-tabs]: https://eslint.style/rules/js/no-tabs\n[@stylistic/quotes]: https://eslint.style/rules/default/quotes\n[@stylistic/js/quotes]: https://eslint.style/rules/js/quotes\n[@stylistic/ts/quotes]: https://eslint.style/rules/ts/quotes\n[@typescript-eslint/eslint-plugin]: https://github.com/typescript-eslint/typescript-eslint\n[@typescript-eslint/lines-around-comment]: https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/lines-around-comment.md\n[@typescript-eslint/quotes]: https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/quotes.md\n[arrow-body-style]: https://eslint.org/docs/rules/arrow-body-style\n[babel/quotes]: https://github.com/babel/eslint-plugin-babel#rules\n[curly]: https://eslint.org/docs/rules/curly\n[eslint-plugin-babel]: https://github.com/babel/eslint-plugin-babel\n[eslint-plugin-flowtype]: https://github.com/gajus/eslint-plugin-flowtype\n[eslint-plugin-prettier-autofix-issue]: https://github.com/prettier/eslint-plugin-prettier#arrow-body-style-and-prefer-arrow-callback-issue\n[eslint-plugin-prettier-recommended]: https://github.com/prettier/eslint-plugin-prettier#recommended-configuration\n[eslint-plugin-prettier]: https://github.com/prettier/eslint-plugin-prettier\n[eslint-plugin-react]: https://github.com/yannickcr/eslint-plugin-react\n[eslint-plugin-standard]: https://github.com/xjamundx/eslint-plugin-standard\n[eslint-plugin-unicorn]: https://github.com/sindresorhus/eslint-plugin-unicorn\n[eslint-plugin-vue]: https://github.com/vuejs/eslint-plugin-vue\n[eslint.config.js (flat config)]: https://eslint.org/docs/latest/use/configure/configuration-files-new\n[eslintrc]: https://eslint.org/docs/latest/use/configure/configuration-files\n[lines-around-comment]: https://eslint.org/docs/rules/lines-around-comment\n[max-len]: https://eslint.org/docs/rules/max-len\n[multiple configuration files]: https://eslint.org/docs/user-guide/configuring#configuration-cascading-and-hierarchy\n[no-confusing-arrow]: https://eslint.org/docs/rules/no-confusing-arrow\n[no-mixed-operators]: https://eslint.org/docs/rules/no-mixed-operators\n[no-restricted-syntax]: https://eslint.org/docs/rules/no-restricted-syntax\n[no-sequences-full]: https://eslint.org/docs/rules/no-sequences#when-not-to-use-it\n[no-sequences]: https://eslint.org/docs/rules/no-sequences\n[no-tabs]: https://eslint.org/docs/rules/no-tabs\n[no-unexpected-multiline]: https://eslint.org/docs/rules/no-unexpected-multiline\n[overrides]: https://eslint.org/docs/user-guide/configuring#configuration-based-on-glob-patterns\n[package.json]: https://github.com/prettier/eslint-config-prettier/blob/main/package.json\n[prefer-arrow-callback]: https://eslint.org/docs/rules/prefer-arrow-callback\n[quotes]: https://eslint.org/docs/rules/quotes\n[singlequote]: https://prettier.io/docs/en/options.html#quotes\n[string formatting rules]: https://prettier.io/docs/en/rationale.html#strings\n[unicorn/template-indent]: https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/template-indent.md\n[vue/html-self-closing]: https://github.com/vuejs/eslint-plugin-vue/blob/master/docs/rules/html-self-closing.md\n[vue/max-len]: https://github.com/vuejs/eslint-plugin-vue/blob/master/docs/rules/max-len.md\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017, 2018, 2019, 2020, 2021, 2022, 2023 Simon Lydell and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-config-prettier/-/eslint-config-prettier-10.0.1.tgz#fbb03bfc8db0651df9ce4e8b7150d11c5fe3addf",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-config-prettier/-/eslint-config-prettier-10.0.1.tgz",
    "hash": "fbb03bfc8db0651df9ce4e8b7150d11c5fe3addf",
    "integrity": "sha512-lZBts941cyJyeaooiKxAtzoPHTN+GbQTJFAIdQbRhA4/8whaAraEh47Whw/ZFfrjNSnlAxqfm9i0XVAEkULjCw==",
    "registry": "npm",
    "packageName": "eslint-config-prettier",
    "cacheIntegrity": "sha512-lZBts941cyJyeaooiKxAtzoPHTN+GbQTJFAIdQbRhA4/8whaAraEh47Whw/ZFfrjNSnlAxqfm9i0XVAEkULjCw== sha1-+7A7/I2wZR35zk6LcVDRHF/jrd8="
  },
  "registry": "npm",
  "hash": "fbb03bfc8db0651df9ce4e8b7150d11c5fe3addf"
}
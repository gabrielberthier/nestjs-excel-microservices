{
  "manifest": {
    "name": "synckit",
    "version": "0.9.2",
    "type": "module",
    "description": "Perform async work synchronously in Node.js using `worker_threads` with first-class TypeScript support.",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/un-ts/synckit.git"
    },
    "author": {
      "name": "JounQin",
      "email": "admin@1stg.me",
      "url": "https://www.1stG.me"
    },
    "funding": "https://opencollective.com/unts",
    "license": "MIT",
    "engines": {
      "node": "^14.18.0 || >=16.0.0"
    },
    "main": "./lib/index.cjs",
    "module": "./lib/index.js",
    "exports": {
      "types": "./lib/index.d.ts",
      "import": "./lib/index.js",
      "require": "./lib/index.cjs"
    },
    "types": "./lib/index.d.ts",
    "files": [
      "lib",
      "!**/*.tsbuildinfo"
    ],
    "keywords": [
      "deasync",
      "make-synchronized",
      "make-synchronous",
      "sync",
      "sync-exec",
      "sync-rpc",
      "sync-threads",
      "synchronize",
      "synckit"
    ],
    "dependencies": {
      "@pkgr/core": "^0.1.0",
      "tslib": "^2.6.2"
    },
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v6/npm-synckit-0.9.2-a3a935eca7922d48b9e7d6c61822ee6c3ae4ec62-integrity/node_modules/synckit/package.json",
    "readmeFilename": "README.md",
    "readme": "# synckit\n\n[![GitHub Actions](https://github.com/un-ts/synckit/workflows/CI/badge.svg)](https://github.com/un-ts/synckit/actions/workflows/ci.yml)\n[![Codecov](https://img.shields.io/codecov/c/github/un-ts/synckit.svg)](https://codecov.io/gh/un-ts/synckit)\n[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2Fun-ts%2Fsynckit%2Fmain%2Fpackage.json)](https://github.com/plantain-00/type-coverage)\n[![npm](https://img.shields.io/npm/v/synckit.svg)](https://www.npmjs.com/package/synckit)\n[![GitHub Release](https://img.shields.io/github/release/un-ts/synckit)](https://github.com/un-ts/synckit/releases)\n\n[![Conventional Commits](https://img.shields.io/badge/conventional%20commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n[![Renovate enabled](https://img.shields.io/badge/renovate-enabled-brightgreen.svg)](https://renovatebot.com)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![Code Style: Prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\nPerform async work synchronously in Node.js using `worker_threads` with first-class TypeScript and Yarn P'n'P support.\n\n## TOC <!-- omit in toc -->\n\n- [Usage](#usage)\n  - [Install](#install)\n  - [API](#api)\n  - [Types](#types)\n  - [Options](#options)\n  - [Envs](#envs)\n  - [TypeScript](#typescript)\n    - [`ts-node`](#ts-node)\n    - [`esbuild-register`](#esbuild-register)\n    - [`esbuild-runner`](#esbuild-runner)\n    - [`swc`](#swc)\n    - [`tsx`](#tsx)\n- [Benchmark](#benchmark)\n- [Sponsors](#sponsors)\n- [Backers](#backers)\n- [Changelog](#changelog)\n- [License](#license)\n\n## Usage\n\n### Install\n\n```sh\n# yarn\nyarn add synckit\n\n# npm\nnpm i synckit\n```\n\n### API\n\n```js\n// runner.js\nimport { createSyncFn } from 'synckit'\n\n// the worker path must be absolute\nconst syncFn = createSyncFn(require.resolve('./worker'), {\n  tsRunner: 'tsx', // optional, can be `'ts-node' | 'esbuild-register' | 'esbuild-runner' | 'tsx'`\n})\n\n// do whatever you want, you will get the result synchronously!\nconst result = syncFn(...args)\n```\n\n```js\n// worker.js\nimport { runAsWorker } from 'synckit'\n\nrunAsWorker(async (...args) => {\n  // do expensive work\n  return result\n})\n```\n\nYou must make sure, the `result` is serializable by [`Structured Clone Algorithm`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)\n\n### Types\n\n````ts\nexport interface GlobalShim {\n  moduleName: string\n  /**\n   * `undefined` means side effect only\n   */\n  globalName?: string\n  /**\n   * 1. `undefined` or empty string means `default`, for example:\n   * ```js\n   * import globalName from 'module-name'\n   * ```\n   *\n   * 2. `null` means namespaced, for example:\n   * ```js\n   * import * as globalName from 'module-name'\n   * ```\n   *\n   */\n  named?: string | null\n  /**\n   * If not `false`, the shim will only be applied when the original `globalName` unavailable,\n   * for example you may only want polyfill `globalThis.fetch` when it's unavailable natively:\n   * ```js\n   * import fetch from 'node-fetch'\n   *\n   * if (!globalThis.fetch) {\n   *   globalThis.fetch = fetch\n   * }\n   * ```\n   */\n  conditional?: boolean\n}\n````\n\n### Options\n\n1. `execArgv` same as env `SYNCKIT_EXEC_ARGV`\n2. `globalShims`: Similar like env `SYNCKIT_GLOBAL_SHIMS` but much more flexible which can be a `GlobalShim` `Array`, see `GlobalShim`'s [definition](#types) for more details\n3. `timeout` same as env `SYNCKIT_TIMEOUT`\n4. `transferList`: Please refer Node.js [`worker_threads`](https://nodejs.org/api/worker_threads.html#:~:text=Default%3A%20true.-,transferList,-%3CObject%5B%5D%3E%20If) documentation\n5. `tsRunner` same as env `SYNCKIT_TS_RUNNER`\n\n### Envs\n\n1. `SYNCKIT_EXEC_ARGV`: List of node CLI options passed to the worker, split with comma `,`. (default as `[]`), see also [`node` docs](https://nodejs.org/api/worker_threads.html)\n2. `SYNCKIT_GLOBAL_SHIMS`: Whether to enable the default `DEFAULT_GLOBAL_SHIMS_PRESET` as `globalShims`\n3. `SYNCKIT_TIMEOUT`: `timeout` for performing the async job (no default)\n4. `SYNCKIT_TS_RUNNER`: Which TypeScript runner to be used, it could be very useful for development, could be `'ts-node' | 'esbuild-register' | 'esbuild-runner' | 'swc' | 'tsx'`, `'ts-node'` is used by default, make sure you have installed them already\n\n### TypeScript\n\n#### `ts-node`\n\nIf you want to use `ts-node` for worker file (a `.ts` file), it is supported out of box!\n\nIf you want to use a custom tsconfig as project instead of default `tsconfig.json`, use `TS_NODE_PROJECT` env. Please view [ts-node](https://github.com/TypeStrong/ts-node#tsconfig) for more details.\n\nIf you want to integrate with [tsconfig-paths](https://www.npmjs.com/package/tsconfig-paths), please view [ts-node](https://github.com/TypeStrong/ts-node#paths-and-baseurl) for more details.\n\n#### `esbuild-register`\n\nPlease view [`esbuild-register`][] for its document\n\n#### `esbuild-runner`\n\nPlease view [`esbuild-runner`][] for its document\n\n#### `swc`\n\nPlease view [`@swc-node/register`][] for its document\n\n#### `tsx`\n\nPlease view [`tsx`][] for its document\n\n## Benchmark\n\nIt is about 50x faster than [`sync-threads`](https://github.com/lambci/sync-threads) but 10x slower than native for reading the file content itself 1000 times during runtime, and 40x faster than `sync-threads` but 10x slower than native for total time on my personal MacBook Pro with 64G M1 Max.\n\nAnd it's almost 5x faster than [`deasync`](https://github.com/abbr/deasync) but requires no native bindings or `node-gyp`.\n\nSee [benchmark.cjs](./benchmarks/benchmark.cjs.txt) and [benchmark.esm](./benchmarks/benchmark.esm.txt) for more details.\n\nYou can try it with running `yarn benchmark` by yourself. [Here](./benchmarks/benchmark.js) is the benchmark source code.\n\n## Sponsors\n\n| 1stG                                                                                                                               | RxTS                                                                                                                               | UnTS                                                                                                                               |\n| ---------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| [![1stG Open Collective backers and sponsors](https://opencollective.com/1stG/organizations.svg)](https://opencollective.com/1stG) | [![RxTS Open Collective backers and sponsors](https://opencollective.com/rxts/organizations.svg)](https://opencollective.com/rxts) | [![UnTS Open Collective backers and sponsors](https://opencollective.com/unts/organizations.svg)](https://opencollective.com/unts) |\n\n## Backers\n\n[![Backers](https://raw.githubusercontent.com/1stG/static/master/sponsors.svg)](https://github.com/sponsors/JounQin)\n\n| 1stG                                                                                                                             | RxTS                                                                                                                             | UnTS                                                                                                                             |\n| -------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| [![1stG Open Collective backers and sponsors](https://opencollective.com/1stG/individuals.svg)](https://opencollective.com/1stG) | [![RxTS Open Collective backers and sponsors](https://opencollective.com/rxts/individuals.svg)](https://opencollective.com/rxts) | [![UnTS Open Collective backers and sponsors](https://opencollective.com/unts/individuals.svg)](https://opencollective.com/unts) |\n\n## Changelog\n\nDetailed changes for each release are documented in [CHANGELOG.md](./CHANGELOG.md).\n\n## License\n\n[MIT][] © [JounQin][]@[1stG.me][]\n\n[`esbuild-register`]: https://github.com/egoist/esbuild-register\n[`esbuild-runner`]: https://github.com/folke/esbuild-runner\n[`@swc-node/register`]: https://github.com/swc-project/swc-node/tree/master/packages/register\n[`tsx`]: https://github.com/esbuild-kit/tsx\n[1stg.me]: https://www.1stg.me\n[jounqin]: https://GitHub.com/JounQin\n[mit]: http://opensource.org/licenses/MIT\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 UnTS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/synckit/-/synckit-0.9.2.tgz#a3a935eca7922d48b9e7d6c61822ee6c3ae4ec62",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/synckit/-/synckit-0.9.2.tgz",
    "hash": "a3a935eca7922d48b9e7d6c61822ee6c3ae4ec62",
    "integrity": "sha512-vrozgXDQwYO72vHjUb/HnFbQx1exDjoKzqx23aXEg2a9VIg2TSFZ8FmeZpTjUCFMYw7mpX4BE2SFu8wI7asYsw==",
    "registry": "npm",
    "packageName": "synckit",
    "cacheIntegrity": "sha512-vrozgXDQwYO72vHjUb/HnFbQx1exDjoKzqx23aXEg2a9VIg2TSFZ8FmeZpTjUCFMYw7mpX4BE2SFu8wI7asYsw== sha1-o6k17KeSLUi559bGGCLubDrk7GI="
  },
  "registry": "npm",
  "hash": "a3a935eca7922d48b9e7d6c61822ee6c3ae4ec62"
}
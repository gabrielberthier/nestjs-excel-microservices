{
  "manifest": {
    "name": "bson",
    "description": "A bson parser for node.js and the browser",
    "keywords": [
      "mongodb",
      "bson",
      "parser"
    ],
    "files": [
      "lib",
      "src",
      "bson.d.ts",
      "etc/prepare.js",
      "vendor"
    ],
    "types": "bson.d.ts",
    "version": "6.10.2",
    "author": {
      "name": "The MongoDB NodeJS Team",
      "email": "dbx-node@mongodb.com"
    },
    "license": "Apache-2.0",
    "contributors": [],
    "repository": {
      "type": "git",
      "url": "https://github.com/mongodb/js-bson.git"
    },
    "bugs": {
      "url": "https://jira.mongodb.org/projects/NODE/issues/"
    },
    "devDependencies": {
      "@istanbuljs/nyc-config-typescript": "^1.0.2",
      "@microsoft/api-extractor": "^7.47.5",
      "@rollup/plugin-node-resolve": "^15.2.3",
      "@rollup/plugin-typescript": "^11.1.6",
      "@types/chai": "^4.3.17",
      "@types/mocha": "^10.0.7",
      "@types/node": "^22.1.0",
      "@types/sinon": "^17.0.3",
      "@types/sinon-chai": "^3.2.12",
      "@typescript-eslint/eslint-plugin": "^8.0.1",
      "@typescript-eslint/parser": "^8.0.1",
      "benchmark": "^2.1.4",
      "chai": "^4.4.1",
      "chalk": "^5.3.0",
      "dbx-js-tools": "github:mongodb-js/dbx-js-tools",
      "eslint": "^9.8.0",
      "eslint-config-prettier": "^9.1.0",
      "eslint-plugin-no-bigint-usage": "file:.cache/yarn/v6/npm-bson-6.10.2-092ba1d2abee7e126320003f88d6883c3b1897df-integrity/node_modules/bson/etc/eslint/no-bigint-usage",
      "eslint-plugin-prettier": "^5.2.1",
      "eslint-plugin-tsdoc": "^0.3.0",
      "magic-string": "^0.30.11",
      "mocha": "^10.7.0",
      "node-fetch": "^3.3.2",
      "nyc": "^15.1.0",
      "prettier": "^3.3.3",
      "rollup": "^4.20.0",
      "sinon": "^18.0.0",
      "sinon-chai": "^3.7.0",
      "source-map-support": "^0.5.21",
      "tar": "^7.4.3",
      "ts-node": "^10.9.2",
      "tsd": "^0.31.1",
      "typescript": "^5.5.4",
      "typescript-cached-transpile": "0.0.6",
      "uuid": "^10.0.0"
    },
    "tsd": {
      "directory": "test/types",
      "compilerOptions": {
        "strict": true,
        "target": "esnext",
        "module": "commonjs",
        "moduleResolution": "node"
      }
    },
    "config": {
      "native": false
    },
    "main": "./lib/bson.cjs",
    "module": "./lib/bson.mjs",
    "exports": {
      "import": {
        "types": "./bson.d.ts",
        "default": "./lib/bson.mjs"
      },
      "require": {
        "types": "./bson.d.ts",
        "default": "./lib/bson.cjs"
      },
      "react-native": "./lib/bson.rn.cjs",
      "browser": "./lib/bson.mjs"
    },
    "compass:exports": {
      "import": "./lib/bson.cjs",
      "require": "./lib/bson.cjs"
    },
    "engines": {
      "node": ">=16.20.1"
    },
    "scripts": {
      "pretest": "npm run build",
      "test": "npm run check:node && npm run check:web && npm run check:web-no-bigint",
      "check:node": "WEB=false mocha test/node",
      "check:tsd": "npm run build:dts && tsd",
      "check:web": "WEB=true mocha test/node",
      "check:web-no-bigint": "WEB=true NO_BIGINT=true mocha test/node",
      "check:granular-bench": "npm run build:bench && node ./test/bench/etc/run_granular_benchmarks.js",
      "check:spec-bench": "npm run build:bench && node ./test/bench/lib/spec/bsonBench.js",
      "check:custom-bench": "npm run build && node ./test/bench/custom/main.mjs",
      "build:bench": "cd test/bench && npx tsc",
      "build:ts": "node ./node_modules/typescript/bin/tsc",
      "build:dts": "npm run build:ts && api-extractor run --typescript-compiler-folder node_modules/typescript --local && node etc/clean_definition_files.cjs",
      "build:bundle": "rollup -c rollup.config.mjs",
      "build": "npm run build:dts && npm run build:bundle",
      "check:lint": "ESLINT_USE_FLAT_CONFIG=false eslint -v && ESLINT_USE_FLAT_CONFIG=false eslint --ext '.js,.ts' --max-warnings=0 src test && npm run build:dts && npm run check:tsd",
      "format": "eslint --ext '.js,.ts' src test --fix",
      "check:coverage": "nyc --check-coverage npm run check:node",
      "prepare": "node etc/prepare.js",
      "release": "standard-version -i HISTORY.md"
    },
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v6/npm-bson-6.10.2-092ba1d2abee7e126320003f88d6883c3b1897df-integrity/node_modules/bson/package.json",
    "readmeFilename": "README.md",
    "readme": "# BSON parser\n\nBSON is short for \"Binary JSON,\" and is the binary-encoded serialization of JSON-like documents.\nYou can learn more about it in [the specification](http://bsonspec.org).\n\n### Table of Contents\n\n- [Usage](#usage)\n- [Bugs/Feature Requests](#bugs--feature-requests)\n- [Installation](#installation)\n- [Documentation](#documentation)\n- [FAQ](#faq)\n\n\n### Release Integrity\n\nReleases are created automatically and signed using the [Node team's GPG key](https://pgp.mongodb.com/node-driver.asc). This applies to the git tag as well as all release packages provided as part of a GitHub release. To verify the provided packages, download the key and import it using gpg:\n\n```shell\ngpg --import node-driver.asc\n```\n\nThe GitHub release contains a detached signature file for the NPM package (named\n`bson-X.Y.Z.tgz.sig`).\n\nThe following command returns the link npm package. \n```shell\nnpm view bson@vX.Y.Z dist.tarball \n```\n\nUsing the result of the above command, a `curl` command can return the official npm package for the release.\n\nTo verify the integrity of the downloaded package, run the following command:\n```shell\ngpg --verify bson-X.Y.Z.tgz.sig bson-X.Y.Z.tgz\n```\n\n>[!Note]\nNo verification is done when using npm to install the package. The contents of the Github tarball and npm's tarball are identical.\n\n## Bugs / Feature Requests\n\nThink you've found a bug? Want to see a new feature in `bson`? Please open a case in our issue management tool, JIRA:\n\n1. Create an account and login: [jira.mongodb.org](https://jira.mongodb.org)\n2. Navigate to the NODE project: [jira.mongodb.org/browse/NODE](https://jira.mongodb.org/browse/NODE)\n3. Click **Create Issue** - Please provide as much information as possible about the issue and how to reproduce it.\n\nBug reports in JIRA for the NODE driver project are **public**.\n\n## Usage\n\nTo build a new version perform the following operations:\n\n```\nnpm install\nnpm run build\n```\n\n### Node.js or Bundling Usage\n\nWhen using a bundler or Node.js you can import bson using the package name:\n\n```js\nimport { BSON, EJSON, ObjectId } from 'bson';\n// or:\n// const { BSON, EJSON, ObjectId } = require('bson');\n\nconst bytes = BSON.serialize({ _id: new ObjectId() });\nconsole.log(bytes);\nconst doc = BSON.deserialize(bytes);\nconsole.log(EJSON.stringify(doc));\n// {\"_id\":{\"$oid\":\"...\"}}\n```\n\n### Browser Usage\n\nIf you are working directly in the browser without a bundler please use the `.mjs` bundle like so:\n\n```html\n<script type=\"module\">\n  import { BSON, EJSON, ObjectId } from './lib/bson.mjs';\n\n  const bytes = BSON.serialize({ _id: new ObjectId() });\n  console.log(bytes);\n  const doc = BSON.deserialize(bytes);\n  console.log(EJSON.stringify(doc));\n  // {\"_id\":{\"$oid\":\"...\"}}\n</script>\n```\n\n## Installation\n\n```sh\nnpm install bson\n```\n\n### MongoDB Node.js Driver Version Compatibility\n\nOnly the following version combinations with the [MongoDB Node.js Driver](https://github.com/mongodb/node-mongodb-native) are considered stable.\n\n|               | `bson@1.x` | `bson@4.x` | `bson@5.x` | `bson@6.x` |\n| ------------- | ---------- | ---------- | ---------- | ---------- |\n| `mongodb@6.x` | N/A        | N/A        | N/A        | ✓          |\n| `mongodb@5.x` | N/A        | N/A        | ✓          | N/A        |\n| `mongodb@4.x` | N/A        | ✓          | N/A        | N/A        |\n| `mongodb@3.x` | ✓          | N/A        | N/A        | N/A        |\n\n## Documentation\n\n### BSON\n\n[API documentation](https://mongodb.github.io/node-mongodb-native/Next/modules/BSON.html)\n\n<a name=\"EJSON\"></a>\n\n### EJSON\n\n- [EJSON](#EJSON)\n\n  - [.parse(text, [options])](#EJSON.parse)\n\n  - [.stringify(value, [replacer], [space], [options])](#EJSON.stringify)\n\n  - [.serialize(bson, [options])](#EJSON.serialize)\n\n  - [.deserialize(ejson, [options])](#EJSON.deserialize)\n\n<a name=\"EJSON.parse\"></a>\n\n#### _EJSON_.parse(text, [options])\n\n| Param             | Type                 | Default           | Description                                                                        |\n| ----------------- | -------------------- | ----------------- | ---------------------------------------------------------------------------------- |\n| text              | <code>string</code>  |                   |                                                                                    |\n| [options]         | <code>object</code>  |                   | Optional settings                                                                  |\n| [options.relaxed] | <code>boolean</code> | <code>true</code> | Attempt to return native JS types where possible, rather than BSON types (if true) |\n\nParse an Extended JSON string, constructing the JavaScript value or object described by that\nstring.\n\n**Example**\n\n```js\nconst { EJSON } = require('bson');\nconst text = '{ \"int32\": { \"$numberInt\": \"10\" } }';\n\n// prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }\nconsole.log(EJSON.parse(text, { relaxed: false }));\n\n// prints { int32: 10 }\nconsole.log(EJSON.parse(text));\n```\n\n<a name=\"EJSON.stringify\"></a>\n\n#### _EJSON_.stringify(value, [replacer], [space], [options])\n\n| Param             | Type                                        | Default           | Description                                                                                                                                                                                                                                                                                                                                        |\n| ----------------- | ------------------------------------------- | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| value             | <code>object</code>                         |                   | The value to convert to extended JSON                                                                                                                                                                                                                                                                                                              |\n| [replacer]        | <code>function</code> \\| <code>array</code> |                   | A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string |\n| [space]           | <code>string</code> \\| <code>number</code>  |                   | A String or Number object that's used to insert white space into the output JSON string for readability purposes.                                                                                                                                                                                                                                  |\n| [options]         | <code>object</code>                         |                   | Optional settings                                                                                                                                                                                                                                                                                                                                  |\n| [options.relaxed] | <code>boolean</code>                        | <code>true</code> | Enabled Extended JSON's `relaxed` mode                                                                                                                                                                                                                                                                                                             |\n| [options.legacy]  | <code>boolean</code>                        | <code>true</code> | Output in Extended JSON v1                                                                                                                                                                                                                                                                                                                         |\n\nConverts a BSON document to an Extended JSON string, optionally replacing values if a replacer\nfunction is specified or optionally including only the specified properties if a replacer array\nis specified.\n\n**Example**\n\n```js\nconst { EJSON } = require('bson');\nconst Int32 = require('mongodb').Int32;\nconst doc = { int32: new Int32(10) };\n\n// prints '{\"int32\":{\"$numberInt\":\"10\"}}'\nconsole.log(EJSON.stringify(doc, { relaxed: false }));\n\n// prints '{\"int32\":10}'\nconsole.log(EJSON.stringify(doc));\n```\n\n<a name=\"EJSON.serialize\"></a>\n\n#### _EJSON_.serialize(bson, [options])\n\n| Param     | Type                | Description                                          |\n| --------- | ------------------- | ---------------------------------------------------- |\n| bson      | <code>object</code> | The object to serialize                              |\n| [options] | <code>object</code> | Optional settings passed to the `stringify` function |\n\nSerializes an object to an Extended JSON string, and reparse it as a JavaScript object.\n\n<a name=\"EJSON.deserialize\"></a>\n\n#### _EJSON_.deserialize(ejson, [options])\n\n| Param     | Type                | Description                                  |\n| --------- | ------------------- | -------------------------------------------- |\n| ejson     | <code>object</code> | The Extended JSON object to deserialize      |\n| [options] | <code>object</code> | Optional settings passed to the parse method |\n\nDeserializes an Extended JSON object into a plain JavaScript object with native/BSON types\n\n## Error Handling\n\nIt is our recommendation to use `BSONError.isBSONError()` checks on errors and to avoid relying on parsing `error.message` and `error.name` strings in your code. We guarantee `BSONError.isBSONError()` checks will pass according to semver guidelines, but errors may be sub-classed or their messages may change at any time, even patch releases, as we see fit to increase the helpfulness of the errors.\n\nAny new errors we add to the driver will directly extend an existing error class and no existing error will be moved to a different parent class outside of a major release.\nThis means `BSONError.isBSONError()` will always be able to accurately capture the errors that our BSON library throws.\n\nHypothetical example: A collection in our Db has an issue with UTF-8 data:\n\n```ts\nlet documentCount = 0;\nconst cursor = collection.find({}, { utf8Validation: true });\ntry {\n  for await (const doc of cursor) documentCount += 1;\n} catch (error) {\n  if (BSONError.isBSONError(error)) {\n    console.log(`Found the troublemaker UTF-8!: ${documentCount} ${error.message}`);\n    return documentCount;\n  }\n  throw error;\n}\n```\n\n## React Native\n\nBSON vendors the required polyfills for `TextEncoder`, `TextDecoder`, `atob`, `btoa` imported from React Native and therefore doesn't expect users to polyfill these. One additional polyfill, `crypto.getRandomValues` is recommended and can be installed with the following command:\n\n```sh\nnpm install --save react-native-get-random-values\n```\n\nThe following snippet should be placed at the top of the entrypoint (by default this is the root `index.js` file) for React Native projects using the BSON library. These lines must be placed for any code that imports `BSON`.\n\n```typescript\n// Required Polyfills For ReactNative\nimport 'react-native-get-random-values';\n```\n\nFinally, import the `BSON` library like so:\n\n```typescript\nimport { BSON, EJSON } from 'bson';\n```\n\nThis will cause React Native to import the `node_modules/bson/lib/bson.rn.cjs` bundle (see the `\"react-native\"` setting we have in the `\"exports\"` section of our [package.json](./package.json).)\n\n### Technical Note about React Native module import\n\nThe `\"exports\"` definition in our `package.json` will result in BSON's CommonJS bundle being imported in a React Native project instead of the ES module bundle. Importing the CommonJS bundle is necessary because BSON's ES module bundle of BSON uses top-level await, which is not supported syntax in [React Native's runtime hermes](https://hermesengine.dev/).\n\n## FAQ\n\n#### Why does `undefined` get converted to `null`?\n\nThe `undefined` BSON type has been [deprecated for many years](http://bsonspec.org/spec.html), so this library has dropped support for it. Use the `ignoreUndefined` option (for example, from the [driver](http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#connect) ) to instead remove `undefined` keys.\n\n#### How do I add custom serialization logic?\n\nThis library looks for `toBSON()` functions on every path, and calls the `toBSON()` function to get the value to serialize.\n\n```javascript\nconst BSON = require('bson');\n\nclass CustomSerialize {\n  toBSON() {\n    return 42;\n  }\n}\n\nconst obj = { answer: new CustomSerialize() };\n// \"{ answer: 42 }\"\nconsole.log(BSON.deserialize(BSON.serialize(obj)));\n```\n",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/bson/-/bson-6.10.2.tgz#092ba1d2abee7e126320003f88d6883c3b1897df",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/bson/-/bson-6.10.2.tgz",
    "hash": "092ba1d2abee7e126320003f88d6883c3b1897df",
    "integrity": "sha512-5afhLTjqDSA3akH56E+/2J6kTDuSIlBxyXPdQslj9hcIgOUE378xdOfZvC/9q3LifJNI6KR/juZ+d0NRNYBwXg==",
    "registry": "npm",
    "packageName": "bson",
    "cacheIntegrity": "sha512-5afhLTjqDSA3akH56E+/2J6kTDuSIlBxyXPdQslj9hcIgOUE378xdOfZvC/9q3LifJNI6KR/juZ+d0NRNYBwXg== sha1-CSuh0qvufhJjIAA/iNaIPDsYl98="
  },
  "registry": "npm",
  "hash": "092ba1d2abee7e126320003f88d6883c3b1897df"
}
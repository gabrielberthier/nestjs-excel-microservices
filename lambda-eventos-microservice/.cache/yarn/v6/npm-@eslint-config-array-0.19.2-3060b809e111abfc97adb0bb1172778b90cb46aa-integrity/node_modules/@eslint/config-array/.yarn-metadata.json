{
  "manifest": {
    "name": "@eslint/config-array",
    "version": "0.19.2",
    "description": "General purpose glob-based configuration matching.",
    "author": {
      "name": "Nicholas C. Zakas"
    },
    "type": "module",
    "main": "dist/esm/index.js",
    "types": "dist/esm/index.d.ts",
    "exports": {
      "require": {
        "types": "./dist/cjs/index.d.cts",
        "default": "./dist/cjs/index.cjs"
      },
      "import": {
        "types": "./dist/esm/index.d.ts",
        "default": "./dist/esm/index.js"
      }
    },
    "files": [
      "dist"
    ],
    "publishConfig": {
      "access": "public"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/eslint/rewrite.git"
    },
    "bugs": {
      "url": "https://github.com/eslint/rewrite/issues"
    },
    "homepage": "https://github.com/eslint/rewrite#readme",
    "scripts": {
      "build:dedupe-types": "node ../../tools/dedupe-types.js dist/cjs/index.cjs dist/esm/index.js",
      "build:cts": "node ../../tools/build-cts.js dist/esm/index.d.ts dist/cjs/index.d.cts",
      "build:std__path": "rollup -c rollup.std__path-config.js && node fix-std__path-imports",
      "build": "rollup -c && npm run build:dedupe-types && tsc -p tsconfig.esm.json && npm run build:cts && npm run build:std__path",
      "test:jsr": "npx jsr@latest publish --dry-run",
      "pretest": "npm run build",
      "test": "mocha tests/",
      "test:coverage": "c8 npm test"
    },
    "keywords": [
      "configuration",
      "configarray",
      "config file"
    ],
    "license": "Apache-2.0",
    "dependencies": {
      "@eslint/object-schema": "^2.1.6",
      "debug": "^4.3.1",
      "minimatch": "^3.1.2"
    },
    "devDependencies": {
      "@jsr/std__path": "^1.0.4",
      "@types/minimatch": "^3.0.5",
      "c8": "^9.1.0",
      "mocha": "^10.4.0",
      "rollup": "^4.16.2",
      "rollup-plugin-copy": "^3.5.0",
      "typescript": "^5.4.5"
    },
    "engines": {
      "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v6/npm-@eslint-config-array-0.19.2-3060b809e111abfc97adb0bb1172778b90cb46aa-integrity/node_modules/@eslint/config-array/package.json",
    "readmeFilename": "README.md",
    "readme": "# Config Array\n\n## Description\n\nA config array is a way of managing configurations that are based on glob pattern matching of filenames. Each config array contains the information needed to determine the correct configuration for any file based on the filename.\n\n**Note:** This is a generic package that can be used outside of ESLint. It contains no ESLint-specific functionality.\n\n## Installation\n\nFor Node.js and compatible runtimes:\n\n```shell\nnpm install @eslint/config-array\n# or\nyarn add @eslint/config-array\n# or\npnpm install @eslint/config-array\n# or\nbun install @eslint/config-array\n```\n\nFor Deno:\n\n```shell\ndeno add @eslint/config-array\n```\n\n## Background\n\nThe basic idea is that all configuration, including overrides, can be represented by a single array where each item in the array is a config object. Config objects appearing later in the array override config objects appearing earlier in the array. You can calculate a config for a given file by traversing all config objects in the array to find the ones that match the filename. Matching is done by specifying glob patterns in `files` and `ignores` properties on each config object. Here's an example:\n\n```js\nexport default [\n\t// match all JSON files\n\t{\n\t\tname: \"JSON Handler\",\n\t\tfiles: [\"**/*.json\"],\n\t\thandler: jsonHandler,\n\t},\n\n\t// match only package.json\n\t{\n\t\tname: \"package.json Handler\",\n\t\tfiles: [\"package.json\"],\n\t\thandler: packageJsonHandler,\n\t},\n];\n```\n\nIn this example, there are two config objects: the first matches all JSON files in all directories and the second matches just `package.json` in the base path directory (all the globs are evaluated as relative to a base path that can be specified). When you retrieve a configuration for `foo.json`, only the first config object matches so `handler` is equal to `jsonHandler`; when you retrieve a configuration for `package.json`, `handler` is equal to `packageJsonHandler` (because both config objects match, the second one wins).\n\n## Usage\n\nFirst, import the `ConfigArray` constructor:\n\n```js\nimport { ConfigArray } from \"@eslint/config-array\";\n\n// or using CommonJS\n\nconst { ConfigArray } = require(\"@eslint/config-array\");\n```\n\nWhen you create a new instance of `ConfigArray`, you must pass in two arguments: an array of configs and an options object. The array of configs is most likely read in from a configuration file, so here's a typical example:\n\n```js\nconst configFilename = path.resolve(process.cwd(), \"my.config.js\");\nconst { default: rawConfigs } = await import(configFilename);\nconst configs = new ConfigArray(rawConfigs, {\n\t// the path to match filenames from\n\tbasePath: process.cwd(),\n\n\t// additional items in each config\n\tschema: mySchema,\n});\n```\n\nThis example reads in an object or array from `my.config.js` and passes it into the `ConfigArray` constructor as the first argument. The second argument is an object specifying the `basePath` (the directory in which `my.config.js` is found) and a `schema` to define the additional properties of a config object beyond `files`, `ignores`, and `name`.\n\n### Specifying a Schema\n\nThe `schema` option is required for you to use additional properties in config objects. The schema is an object that follows the format of an [`ObjectSchema`](https://npmjs.com/package/@eslint/object-schema). The schema specifies both validation and merge rules that the `ConfigArray` instance needs to combine configs when there are multiple matches. Here's an example:\n\n```js\nconst configFilename = path.resolve(process.cwd(), \"my.config.js\");\nconst { default: rawConfigs } = await import(configFilename);\n\nconst mySchema = {\n\n    // define the handler key in configs\n    handler: {\n        required: true,\n        merge(a, b) {\n            if (!b) return a;\n            if (!a) return b;\n        },\n        validate(value) {\n            if (typeof value !== \"function\") {\n                throw new TypeError(\"Function expected.\");\n            }\n        }\n    }\n};\n\nconst configs = new ConfigArray(rawConfigs, {\n\n    // the path to match filenames from\n    basePath: process.cwd(),\n\n    // additional item schemas in each config\n    schema: mySchema,\n\n    // additional config types supported (default: [])\n    extraConfigTypes: [\"array\", \"function\"];\n});\n```\n\n### Config Arrays\n\nConfig arrays can be multidimensional, so it's possible for a config array to contain another config array when `extraConfigTypes` contains `\"array\"`, such as:\n\n```js\nexport default [\n\t// JS config\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\thandler: jsHandler,\n\t},\n\n\t// JSON configs\n\t[\n\t\t// match all JSON files\n\t\t{\n\t\t\tname: \"JSON Handler\",\n\t\t\tfiles: [\"**/*.json\"],\n\t\t\thandler: jsonHandler,\n\t\t},\n\n\t\t// match only package.json\n\t\t{\n\t\t\tname: \"package.json Handler\",\n\t\t\tfiles: [\"package.json\"],\n\t\t\thandler: packageJsonHandler,\n\t\t},\n\t],\n\n\t// filename must match function\n\t{\n\t\tfiles: [filePath => filePath.endsWith(\".md\")],\n\t\thandler: markdownHandler,\n\t},\n\n\t// filename must match all patterns in subarray\n\t{\n\t\tfiles: [[\"*.test.*\", \"*.js\"]],\n\t\thandler: jsTestHandler,\n\t},\n\n\t// filename must not match patterns beginning with !\n\t{\n\t\tname: \"Non-JS files\",\n\t\tfiles: [\"!*.js\"],\n\t\tsettings: {\n\t\t\tjs: false,\n\t\t},\n\t},\n];\n```\n\nIn this example, the array contains both config objects and a config array. When a config array is normalized (see details below), it is flattened so only config objects remain. However, the order of evaluation remains the same.\n\nIf the `files` array contains a function, then that function is called with the path of the file as it was passed in. The function is expected to return `true` if there is a match and `false` if not. (The `ignores` array can also contain functions.)\n\nIf the `files` array contains an item that is an array of strings and functions, then all patterns must match in order for the config to match. In the preceding examples, both `*.test.*` and `*.js` must match in order for the config object to be used.\n\nIf a pattern in the files array begins with `!` then it excludes that pattern. In the preceding example, any filename that doesn't end with `.js` will automatically get a `settings.js` property set to `false`.\n\nYou can also specify an `ignores` key that will force files matching those patterns to not be included. If the `ignores` key is in a config object without any other keys, then those ignores will always be applied; otherwise those ignores act as exclusions. Here's an example:\n\n```js\nexport default [\n\n    // Always ignored\n    {\n        ignores: [\"**/.git/**\", \"**/node_modules/**\"]\n    },\n\n    // .eslintrc.js file is ignored only when .js file matches\n    {\n        files: [\"**/*.js\"],\n        ignores: [\".eslintrc.js\"]\n        handler: jsHandler\n    }\n];\n```\n\nYou can use negated patterns in `ignores` to exclude a file that was already ignored, such as:\n\n```js\nexport default [\n\t// Ignore all JSON files except tsconfig.json\n\t{\n\t\tfiles: [\"**/*\"],\n\t\tignores: [\"**/*.json\", \"!tsconfig.json\"],\n\t},\n];\n```\n\n### Config Functions\n\nConfig arrays can also include config functions when `extraConfigTypes` contains `\"function\"`. A config function accepts a single parameter, `context` (defined by you), and must return either a config object or a config array (it cannot return another function). Config functions allow end users to execute code in the creation of appropriate config objects. Here's an example:\n\n```js\nexport default [\n\t// JS config\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\thandler: jsHandler,\n\t},\n\n\t// JSON configs\n\tfunction (context) {\n\t\treturn [\n\t\t\t// match all JSON files\n\t\t\t{\n\t\t\t\tname: context.name + \" JSON Handler\",\n\t\t\t\tfiles: [\"**/*.json\"],\n\t\t\t\thandler: jsonHandler,\n\t\t\t},\n\n\t\t\t// match only package.json\n\t\t\t{\n\t\t\t\tname: context.name + \" package.json Handler\",\n\t\t\t\tfiles: [\"package.json\"],\n\t\t\t\thandler: packageJsonHandler,\n\t\t\t},\n\t\t];\n\t},\n];\n```\n\nWhen a config array is normalized, each function is executed and replaced in the config array with the return value.\n\n**Note:** Config functions can also be async.\n\n### Normalizing Config Arrays\n\nOnce a config array has been created and loaded with all of the raw config data, it must be normalized before it can be used. The normalization process goes through and flattens the config array as well as executing all config functions to get their final values.\n\nTo normalize a config array, call the `normalize()` method and pass in a context object:\n\n```js\nawait configs.normalize({\n\tname: \"MyApp\",\n});\n```\n\nThe `normalize()` method returns a promise, so be sure to use the `await` operator. The config array instance is normalized in-place, so you don't need to create a new variable.\n\nIf you want to disallow async config functions, you can call `normalizeSync()` instead. This method is completely synchronous and does not require using the `await` operator as it does not return a promise:\n\n```js\nawait configs.normalizeSync({\n\tname: \"MyApp\",\n});\n```\n\n**Important:** Once a `ConfigArray` is normalized, it cannot be changed further. You can, however, create a new `ConfigArray` and pass in the normalized instance to create an unnormalized copy.\n\n### Getting Config for a File\n\nTo get the config for a file, use the `getConfig()` method on a normalized config array and pass in the filename to get a config for:\n\n```js\n// pass in filename\nconst fileConfig = configs.getConfig(\n\tpath.resolve(process.cwd(), \"package.json\"),\n);\n```\n\nThe config array always returns an object, even if there are no configs matching the given filename. You can then inspect the returned config object to determine how to proceed.\n\nA few things to keep in mind:\n\n- If a filename is not an absolute path, it will be resolved relative to the base path directory.\n- The returned config object never has `files`, `ignores`, or `name` properties; the only properties on the object will be the other configuration options specified.\n- The config array caches configs, so subsequent calls to `getConfig()` with the same filename will return in a fast lookup rather than another calculation.\n- A config will only be generated if the filename matches an entry in a `files` key. A config will not be generated without matching a `files` key (configs without a `files` key are only applied when another config with a `files` key is applied; configs without `files` are never applied on their own). Any config with a `files` key entry that is `*` or ends with `/**` or `/*` will only be applied if another entry in the same `files` key matches or another config matches.\n\n## Determining Ignored Paths\n\nYou can determine if a file is ignored by using the `isFileIgnored()` method and passing in the path of any file, as in this example:\n\n```js\nconst ignored = configs.isFileIgnored(\"/foo/bar/baz.txt\");\n```\n\nA file is considered ignored if any of the following is true:\n\n- **It's parent directory is ignored.** For example, if `foo` is in `ignores`, then `foo/a.js` is considered ignored.\n- **It has an ancestor directory that is ignored.** For example, if `foo` is in `ignores`, then `foo/baz/a.js` is considered ignored.\n- **It matches an ignored file pattern.** For example, if `**/a.js` is in `ignores`, then `foo/a.js` and `foo/baz/a.js` are considered ignored.\n- **If it matches an entry in `files` and also in `ignores`.** For example, if `**/*.js` is in `files` and `**/a.js` is in `ignores`, then `foo/a.js` and `foo/baz/a.js` are considered ignored.\n- **The file is outside the `basePath`.** If the `basePath` is `/usr/me`, then `/foo/a.js` is considered ignored.\n\nFor directories, use the `isDirectoryIgnored()` method and pass in the path of any directory, as in this example:\n\n```js\nconst ignored = configs.isDirectoryIgnored(\"/foo/bar/\");\n```\n\nA directory is considered ignored if any of the following is true:\n\n- **It's parent directory is ignored.** For example, if `foo` is in `ignores`, then `foo/baz` is considered ignored.\n- **It has an ancestor directory that is ignored.** For example, if `foo` is in `ignores`, then `foo/bar/baz/a.js` is considered ignored.\n- **It matches and ignored file pattern.** For example, if `**/a.js` is in `ignores`, then `foo/a.js` and `foo/baz/a.js` are considered ignored.\n- **If it matches an entry in `files` and also in `ignores`.** For example, if `**/*.js` is in `files` and `**/a.js` is in `ignores`, then `foo/a.js` and `foo/baz/a.js` are considered ignored.\n- **The file is outside the `basePath`.** If the `basePath` is `/usr/me`, then `/foo/a.js` is considered ignored.\n\n**Important:** A pattern such as `foo/**` means that `foo` and `foo/` are _not_ ignored whereas `foo/bar` is ignored. If you want to ignore `foo` and all of its subdirectories, use the pattern `foo` or `foo/` in `ignores`.\n\n## Caching Mechanisms\n\nEach `ConfigArray` aggressively caches configuration objects to avoid unnecessary work. This caching occurs in two ways:\n\n1. **File-based Caching.** For each filename that is passed into a method, the resulting config is cached against that filename so you're always guaranteed to get the same object returned from `getConfig()` whenever you pass the same filename in.\n2. **Index-based Caching.** Whenever a config is calculated, the config elements that were used to create the config are also cached. So if a given filename matches elements 1, 5, and 7, the resulting config is cached with a key of `1,5,7`. That way, if another file is passed that matches the same config elements, the result is already known and doesn't have to be recalculated. That means two files that match all the same elements will return the same config from `getConfig()`.\n\n## Acknowledgements\n\nThe design of this project was influenced by feedback on the ESLint RFC, and incorporates ideas from:\n\n- Teddy Katz (@not-an-aardvark)\n- Toru Nagashima (@mysticatea)\n- Kai Cataldo (@kaicataldo)\n\n## License\n\nApache 2.0\n\n<!-- NOTE: This section is autogenerated. Do not manually edit.-->\n<!--sponsorsstart-->\n\n## Sponsors\n\nThe following companies, organizations, and individuals support ESLint's ongoing maintenance and development. [Become a Sponsor](https://eslint.org/donate)\nto get your logo on our READMEs and [website](https://eslint.org/sponsors).\n\n<h3>Platinum Sponsors</h3>\n<p><a href=\"https://automattic.com\"><img src=\"https://images.opencollective.com/automattic/d0ef3e1/logo.png\" alt=\"Automattic\" height=\"128\"></a> <a href=\"https://www.airbnb.com/\"><img src=\"https://images.opencollective.com/airbnb/d327d66/logo.png\" alt=\"Airbnb\" height=\"128\"></a></p><h3>Gold Sponsors</h3>\n<p><a href=\"https://qlty.sh/\"><img src=\"https://images.opencollective.com/qltysh/33d157d/logo.png\" alt=\"Qlty Software\" height=\"96\"></a> <a href=\"https://trunk.io/\"><img src=\"https://images.opencollective.com/trunkio/fb92d60/avatar.png\" alt=\"trunk.io\" height=\"96\"></a></p><h3>Silver Sponsors</h3>\n<p><a href=\"https://www.serptriumph.com/\"><img src=\"https://images.opencollective.com/serp-triumph5/fea3074/logo.png\" alt=\"SERP Triumph\" height=\"64\"></a> <a href=\"https://www.jetbrains.com/\"><img src=\"https://images.opencollective.com/jetbrains/fe76f99/logo.png\" alt=\"JetBrains\" height=\"64\"></a> <a href=\"https://liftoff.io/\"><img src=\"https://images.opencollective.com/liftoff/5c4fa84/logo.png\" alt=\"Liftoff\" height=\"64\"></a> <a href=\"https://americanexpress.io\"><img src=\"https://avatars.githubusercontent.com/u/3853301\" alt=\"American Express\" height=\"64\"></a></p><h3>Bronze Sponsors</h3>\n<p><a href=\"https://cybozu.co.jp/\"><img src=\"https://images.opencollective.com/cybozu/933e46d/logo.png\" alt=\"Cybozu\" height=\"32\"></a> <a href=\"https://www.crosswordsolver.org/anagram-solver/\"><img src=\"https://images.opencollective.com/anagram-solver/2666271/logo.png\" alt=\"Anagram Solver\" height=\"32\"></a> <a href=\"https://icons8.com/\"><img src=\"https://images.opencollective.com/icons8/7fa1641/logo.png\" alt=\"Icons8\" height=\"32\"></a> <a href=\"https://discord.com\"><img src=\"https://images.opencollective.com/discordapp/f9645d9/logo.png\" alt=\"Discord\" height=\"32\"></a> <a href=\"https://www.gitbook.com\"><img src=\"https://avatars.githubusercontent.com/u/7111340\" alt=\"GitBook\" height=\"32\"></a> <a href=\"https://nolebase.ayaka.io\"><img src=\"https://avatars.githubusercontent.com/u/11081491\" alt=\"Neko\" height=\"32\"></a> <a href=\"https://nx.dev\"><img src=\"https://avatars.githubusercontent.com/u/23692104\" alt=\"Nx\" height=\"32\"></a> <a href=\"https://opensource.mercedes-benz.com/\"><img src=\"https://avatars.githubusercontent.com/u/34240465\" alt=\"Mercedes-Benz Group\" height=\"32\"></a> <a href=\"https://herocoders.com\"><img src=\"https://avatars.githubusercontent.com/u/37549774\" alt=\"HeroCoders\" height=\"32\"></a></p>\n<h3>Technology Sponsors</h3>\nTechnology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work.\n<p><a href=\"https://netlify.com\"><img src=\"https://raw.githubusercontent.com/eslint/eslint.org/main/src/assets/images/techsponsors/netlify-icon.svg\" alt=\"Netlify\" height=\"32\"></a> <a href=\"https://algolia.com\"><img src=\"https://raw.githubusercontent.com/eslint/eslint.org/main/src/assets/images/techsponsors/algolia-icon.svg\" alt=\"Algolia\" height=\"32\"></a> <a href=\"https://1password.com\"><img src=\"https://raw.githubusercontent.com/eslint/eslint.org/main/src/assets/images/techsponsors/1password-icon.svg\" alt=\"1Password\" height=\"32\"></a></p>\n<!--sponsorsend-->\n",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@eslint/config-array/-/config-array-0.19.2.tgz#3060b809e111abfc97adb0bb1172778b90cb46aa",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@eslint/config-array/-/config-array-0.19.2.tgz",
    "hash": "3060b809e111abfc97adb0bb1172778b90cb46aa",
    "integrity": "sha512-GNKqxfHG2ySmJOBSHg7LxeUx4xpuCoFjacmlCoYWEbaPXLwvfIjixRI12xCQZeULksQb23uiA8F40w5TojpV7w==",
    "registry": "npm",
    "packageName": "@eslint/config-array",
    "cacheIntegrity": "sha512-GNKqxfHG2ySmJOBSHg7LxeUx4xpuCoFjacmlCoYWEbaPXLwvfIjixRI12xCQZeULksQb23uiA8F40w5TojpV7w== sha1-MGC4CeERq/yXrbC7EXJ3i5DLRqo="
  },
  "registry": "npm",
  "hash": "3060b809e111abfc97adb0bb1172778b90cb46aa"
}